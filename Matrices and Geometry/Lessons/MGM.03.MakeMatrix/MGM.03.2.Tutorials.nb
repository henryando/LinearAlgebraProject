(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    230573,       6869]
NotebookOptionsPosition[    167490,       5488]
NotebookOutlinePosition[    220538,       6597]
CellTagsIndexPosition[    220374,       6589]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[TextData[Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1:eJztXcuNwzgSJbBzdwILCAPs3SH4vhcDm4CAScAhKASHoAzaIei6N4egBAgo
BI/VIsVisYo/qe3unnoA0W6J4rceWVWkqD//uvzvr38ppf77DP9/hj/UG/Ex
HZ7hbH637yyKQPCtMPPhY5qeYTD/Pz5/f0ynN5dMIHgfZvn/mO6GDw/EDxv6
Z2jeXFKB4HWY5f1juiEecPx4mLml+9TBBILfisXG6Aj5T/HDhnG1UQSC34TF
xhgjsp/DDxfvYzq+uUYCwXYsNsaQIfMl/IC2iehcgp+HRZfqC2S9hh/ONhEI
fgqWOWMqlPNafkDbROYSwc/AwpGUvbEXPwYlayWCbwz97/+cn+FqfvfPsKxZ
fEyXgrmklB8z/1qT5wnk383/v6clBAKHpxwen2F4hsf811ybf09GTg8Ftkgu
P9b1kJmHz3BD+dvy9J/5CwQvxix3Rv4eIEB+2DA+w7KfavbJxn1ZOfyY1xUb
k3/H5D+Aa588fVc7Cf55eMrbxcjdI4Mf671V55nX+GjbJMaPu7UxZr4l8h+I
ezNPZW1R8GUwOv7IyH+KHzY4nWfRkaYEPyZkY1Cyn8MPyFPZzyXYDUbHj8lc
CT98nWfZi9Uz/LgCGwPrcrX8sOGqxTYRbIDR8a8ZslbKj1DnWfzBljPYxqB0
qa38sDy9vKt9BT8Xmtfx9+QH1HmOKP+zjutye/AD8lT8wYIs6EXPL+XGFn7M
4Q7ybyq4sYUfliNilwii0ItOY0P3An7MPLT2d4P+doU8reHHuk6Tww/D3RMK
7HNE3Op5Si9rTZvTEdRDu7ljlVnt1t/25scqlyYP+/xqv2t6nWUvfvQm73Us
yGgfaszombhHKt8NfTPskY6gHoYfq7zZccpcv+/EjxuSy4l5ftTGftdp324J
P+6gXi3Iv5YfExP3Ivz4XUD88MZZc59bG8zhx4jkcsx8fpaLY+S5XH7AeZHk
e0b7UPx4aELf4cqxoW+EH28Gww8rW7NsWNuE8vty8r36UXV8Hkjxq9e+bYR5
GuOHLXujI/piRvtw/LiieIfaPCJ5Cz/ejAg/4BxgdZ4G9Rkl31cg030i7Rz9
DHINyzrFD06X25sfI4p3zsnDlG1uIzyX3TXaD8Pxw9TtZu7bcEBlwWPC/P8J
pd+iNOQcMoQMfqyyqJ3OY9cqoHzP90v9UCX2/ahD2wjyA95vdaa/OKN9OH48
NPBj6chYAOLkrL2eQXyOHwN6ps0pBxEX1032dSIU8MOGuf0P5tkz/psrlxX8
gDy1PDzhv4Ts7M0PyPsLiMfW29w/6HDMGInnRpBmwA9C/i+Jsg4o3wn0n/Aj
gQp+2DaG/dKUyuUGftiw7qfSZT7hrfyA+djyY79uINeoreeyw7nnxsTHbdri
sqCyQh6MqH3gPeuzaLXoV1Fs4Aecp2vlcws/OtT/na7YA5DRPpgfWEbnvKFf
19oFZB7a2UatSXvQaA4BcTE/YLijdHE/9tpfp4Rpkes3ghAV/ID2t30Pyo5H
R102j9Tw49P+VuB8a73odSX7frfwA/upWlRn/D+2q5PlA/FTbQnnIHLtJdbu
gjQK+DHocE0E7k+H7zPl2iEl/FjX+JQ7ew7b57nvjVTzw1zzfGgEfwJ+mOuU
z6rT+fpVMFaAuMKPL0AGP0bt279j0M7x92FjOk+uf9fOUyf0vi7l3x00s1a+
Iz/amLwy/MDye47lQaWjnb0Nr8G+gdfFltgBEX7APVENM5ZR/KDOU+gr+bHY
4P47VcH7uUzZep2x7zKjfSh+cGuBdv6i+IHLaG2nuX3uVJkoLpj4VBviMt21
vyZi13iv4FqrxT6PguEHlK2Yz57jB3ceD+7v2P6SxqSN38nN5QfF8WAdPaN9
uLGdWpO3Mk/xA48Rc9lGptxHLh1zHfdJy+Qxmrg37c+jR6puWvy7ARA/Bu3v
e0r5g1L8CM5zQ+lS+xOtjcGd6VDCD5gu3Pe4jtcZ7cPxA+tLA7hH8YMah+BY
780TXDrmOvbXjuB6ak/pBNpC+JGAdjYFKT878cOG3uhcVuex8u3WU9JnAtXw
A/Lf8zFktE+rgQ4Crjea0U30MmZTz5xR296073+14RRLB5Q/eAbcw31o5xLo
82o1UwfBAu30qEbnv/dRyw9nm6AyqA3nWxfww4Z1bVEgSEFvfL+2UKbd+VYW
i/1dfb51BT+sntHQLSIQ+NDps6725Eev8DcGy74bspUfc3z53o4gCaD74rW/
r+DHuoaoljW+m/mNr6fs8lp+zPz37KxkAy3lGVCg9fRFR8Rx69fiFlvstIbw
PsznSqTwswHrjr8fZs+HcuFLdAHt+1Xg3pGcvdi5/FjPRETzBH7+ZnQt+93C
lM6Vy49PP68m7KxkA9HfT6R5tfjcwnLWAs+n4f2gLX4VYvUL+yUcP3aADv2O
63q1Tu/LzeFHZ+R9lvuerHPIJfgM9d3bEn70Gp3JAEOygfjvi4b2PedfqIXw
4zvyw4Z1v5Pm91PF+JEzF8SeH5U/59y55xl+DDpjn0mygXh+hDoWpxfWQvgR
48dJvV6/osJN8+8FUvI9KmdLpNb4cuafQfm2SXC+NeIHnP9OOqF7JRuI58cN
xTuydQjTbEzb2L69eP273KfGhJOCtgjdlgfTTmG6fhkOqAxnhedE3/45JtNf
yn0x99ogPT/dFuTtx3X5wvrdvbK4NrIBlx3XL1YezDW4lpTiB9bf4R5tKN/T
Z9u4+g0qLve5/LChN3WG31TH/IA2Rp9Rry38mFC8S5IfaR/dNZGnn2Y4juDx
w4YzKmvHxJu8uHgvKJ3+ZPqbKvMdyf38/Mi2p9MXUrIzEPmdMur3WGXUySml
l9jydJn8sGEEY/P8rkdn8rkC2e0z5b2UH2uZzTON/a0Xnxu0MbLXcjbww5e7
WJ8u92nbPQxtIk+OHzFfxgjKec0ow5GoUyz92L2uIN/J9Gs9P/LysWekc9xY
QyE/At0etHvJdwdr+eH6G42JERtpb37ANu1BPFw+LMsH0D6T6ceW6M+bcvP9
iO51a+DbbVCUT2OJfyLqcjZh8srAc36IyO9AyNxA5H1XTufBZW0VPUaMyteV
Qn6EOu4E0ptQWjhuZ/roBPrkVsmPOUDZOBF9+ZX8sH1h7aImZWfsyA8oz6OJ
c/aucXa1a/sDujYq3CaUfIZlw7JwjD4bzu3QdsDz20GF8wfUYaZI3mEfL9cv
Cvo1nI3gy2kqHbpfoFzbAOd3y8+7KQfOt1ehLXWo4Mc6d2i3B70BZS6ZQ2r4
MSo3P67vn5u/bekcEshcKIO4H/C4c0T9co3K9dJPveLHk1p+YPmh+DEEz/gB
y9uQmT6+FytXq5Y5g5OTLfxItReU/wOT/2TKdynkB14X+TyHwOQF7YISG6SE
H3BdxOYB7XO4tpltgwRtGLap3w/LNSjbHfo/9E24domt5byCHyVj1778iNvC
r+FH2H5toixjJj86Tb+Lh+V7lhP4faghkX8uP2Yu2DkK2jnYf7Xuk9eZ+5Ez
2pDih69jwd+h7FDP2DpRdvCr5o9R+T5NHJqd+QG5Ma15hPFfx48lnUZRc74J
CX7AtQ9Kd+HkewB936qULhHjj/NLnIh0uPXBEeiAc/3Y91ky2o/ix4kpr/XP
UrIZrNuAPO7kvf35gecvag/AiUmjnh+hToptkL340aNr0CZqzLWbcn7kcG0I
rdkx/MDyxdm+KfmGft9OhfM79/zk1SHmL1HR/SUD4negcwXtE7ZXyI/lOr/O
QMsmrt9Zub2PtByE8nxV/lpdKT9a9MxduTH8DPKj1iG28AOPJ3at76IoHx2d
zsOU8aSsbz/kB5VPYwKevxqT913hvRAgLuIH1k/6hH6Sox/BdcMG9Tn1/Fxv
y6mULzvFj5R+uIUfeKyawD1KNrEcROtE5h1vtzQ/UN9H+yzNgRJ+NJl1x/wY
2Dj8+gf3DAwXov8sn7xrgB/rO3W68HzpzHqPyteV7qifb8qNZa3KsyVz+WG5
D/0Lw0Z+hP7BmGwudabqxPu7+PfGtvAD+22pfqLmwa32B5bnh3LrE/DaDaTD
ranG+JHyg1g/UpOI99k3GnyHT1eeL50hx357OR4c0V/Lm/y0VPH7UXDfZfod
KbzPx793AgH6Do/kM/7+pAtoh1geB+XvVeqU7wOxAb8fQZfBv9+R6dJpxNKn
3s0I7/l5tsraP/G0YJvZcAzajN47Bp9x7R2mj9vXi6vLzwXdwg+fx04Gcnyf
e/DDhl7LO+iCDOiN50tXyLWzSZbnrf3+Sn50wg9BCSrmkRp+QJ+W1RNyfFV7
8WP1WQsENdD5+zRK+DGo0P6Gz48qvtaxlR/ufGuBYCN0wfnSCRkelW9Phmth
PI/gWnktP9zZcwLBztAZ50tHbIyULy32fKfS6yApfsg5cIKXQNP7NDj57pW/
bh4d/yP34Tp6uO+P58cgNobgHdDE+dJIN8rZd5XLDxvuwDaB+2MwP2ab6UyV
WyB4FTQ6X1qFZ43k+qBK/V89sE06ZdZajU+qo8oqEHwL8N+w2ZMfzq7hzqIQ
CL4b+L1FX8EPG0bhiODHoO4d9Fp+DIraSyMQfHeUnWNSyo+Zf2J/C3428t7d
KOGHW0sRCH4L0uco5vCjFztD8KvBn8Mb48eg8LsAAsFvRvgOOsWPmUdtIiWB
4HfCPx8L8kPWNQTfDn8DHM4nIA==
    "], {{0, 74}, {200, 0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", ImageSize -> Automatic, Interleaving -> True, 
    Magnification -> Automatic],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{200, 74},
  PlotRange->{{0, 200}, {0, 74}}]]]], "LogoPrefaceTitle"],

Cell[TextData[{
 "Make: Matrices & Geometry\n",
 StyleBox["Authors:  Bill Davis and Jerry Uhl  ", "Subtitle"],
 StyleBox["\[Copyright]1996-2010", "Subtitle",
  FontSize->12],
 StyleBox["\n", "Subtitle"],
 StyleBox["Publisher:  ", "Subtitle",
  FontSize->12],
 StyleBox[ButtonBox["Make: Mathematics",
  BaseStyle->"MakeMathHyperlink",
  ButtonData:>{
    URL["http://www.makemathematics.com"], None}],
  FontSize->12]
}], "PrefaceTitle",
 CellMargins->{{Inherited, Inherited}, {Inherited, 0}}],

Cell[TextData[{
 "MGM.03 Using Aligners, Stretchers and Hangers to Make 2D Matrices Do What \
You Want\n",
 StyleBox["TUTORIALS",
  FontSize->16,
  FontSlant->"Italic"]
}], "Title"],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " 8.0 Initializations"
}], "Special2",
 CellChangeTimes->{3.503085586908386*^9},
 TextAlignment->Center,
 TextJustification->0],

Cell[BoxData[{
 RowBox[{
  RowBox[{"Off", "[", 
   RowBox[{"General", "::", "\"\<spell\>\""}], "]"}], ";"}], "\n", 
 RowBox[{"  ", 
  RowBox[{
   RowBox[{"Off", "[", 
    RowBox[{"General", "::", "\"\<spell1\>\""}], "]"}], ";"}], 
  "  "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Off", "[", 
    RowBox[{"SingularValues", "::", "\"\<deprec\>\""}], "]"}], ";"}], "  ", 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Needs", "[", "\"\<Units`\>\"", "]"}], ";"}], "  ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetOptions", "[", 
    RowBox[{"ListAnimate", ",", " ", 
     RowBox[{"AnimationRepetitions", " ", "\[Rule]", " ", "4"}]}], "]"}], 
   ";"}], "  "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SetOptions", "[", 
    RowBox[{"Animate", ",", " ", 
     RowBox[{"AnimationRepetitions", " ", "\[Rule]", " ", "4"}]}], "]"}], 
   ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{"CMView", "=", 
   RowBox[{"{", 
    RowBox[{"2.7", ",", "1.6", ",", "1.2"}], "}"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.503146559282848*^9, 3.503146563276721*^9}, {
   3.503166885868726*^9, 3.503166892893751*^9}, 3.5032320558203287`*^9, 
   3.503232106276367*^9},
 AspectRatioFixed->True],

Cell[CellGroupData[{

Cell["Vector Drawer", "Subsubsection"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{":", 
     RowBox[{"Date", ":", "  ", 
      RowBox[{
       RowBox[{"Copyright", " ", "1993"}], "-", "2011"}]}]}], ",", " ", 
    RowBox[{"Math", " ", "Everywhere"}], ",", " ", 
    RowBox[{"Inc", "."}]}], " ", "\n", "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{
   "Original", " ", "Conception", " ", "to", " ", "create", " ", "a", " ", 
    "vector", " ", "drawer", " ", "is", " ", "due", " ", "to", " ", "Bill", 
    " ", 
    RowBox[{"Davis", ".", "\[IndentingNewLine]", "Current"}], " ", "code", 
    " ", "is", " ", "by", " ", "Bruce", " ", 
    RowBox[{"Carpenter", "."}]}], "\[IndentingNewLine]", "*)"}], "\n", 
  RowBox[{"(*", "  ", 
   RowBox[{
    RowBox[{
     RowBox[{":", 
      RowBox[{"Drawbacks", ":", "  ", 
       RowBox[{
       "Since", " ", "the", " ", "vectors", " ", "are", " ", "drawn", " ", 
        "out", " ", "of"}]}]}], " ", "\n", "     ", "context"}], ",", " ", 
    RowBox[{
    "the", " ", "shapes", " ", "of", " ", "the", " ", "arrowheads", " ", 
     "are", " ", "only", " ", "\n", "     ", "correct", " ", "with", " ", 
     "AspectRatio", " ", "set", " ", "to", " ", 
     RowBox[{"Automatic", "."}]}]}], "\n", "*)"}]}]], "Input",
 CellChangeTimes->{{3.503083622365877*^9, 3.5030836228723288`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BeginPackage", "[", "\"\<Vector3D`\>\"", "]"}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.5028932309285393`*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"Axes3D", "::", "usage"}], "MessageName"], "=", 
   "\"\<Axes3D[a, b] creates a Graphics3D object of cartesian axes with x, y, \
and z running from -a/3 to a, and with axes labels b units beyond the tips of \
the axes.  Axes3D[a] is Axes3D[a, a/8].\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"Perpend", "::", "usage"}], "MessageName"], "=", 
   "\"\<Perpend[a] returns a unit vector which is perpendicular to the vector \
a.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"Vector", "::", "usage"}], "MessageName"], "=", 
   "\"\<Vector[a] produces a 2 or 3 dimensional vector from the origin to a. \
Arrow[a, Tail \[Rule] tail] gives a vector from tail to a.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"CandMArrow", "::", "usage"}], "MessageName"], "=", 
   "\"\<CandMArrow[a, b] gives a 2D or 3D arrow from a to b.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"VectorHead", "::", "usage"}], "MessageName"], "=", 
   "\"\<VectorHead[a, vec] produces an arrowhead with its tip placed at the \
point a, pointing in the direction of the vector vec.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"Tail", "::", "usage"}], "MessageName"], "=", 
   "\"\<Tail \[Rule] point puts the tail of the vector at point.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"Aperture", "::", "usage"}], "MessageName"], "=", 
   "\"\<Aperture is the ratio of the radius of the base to the length of the \
head of a vector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"TipSize", "::", "usage"}], "MessageName"], "=", 
   "\"\<TipSize specifies an absolute size for the inner tip length of the \
head of a vector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"TipRatio", "::", "usage"}], "MessageName"], "=", 
   "\"\<TipRatio is the ratio of the inner length of the arrowhead to the \
length of the shaft of a vector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"HeadRatio", "::", "usage"}], "MessageName"], "=", 
   "\"\<HeadRatio is the ratio of the outer length of the arrowhead to the \
length of the shaft of a vector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"HeadSize", "::", "usage"}], "MessageName"], "=", 
   "\"\<HeadSize specifies an absolute size for the head of a vector.\>\""}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"ScaleFactor", "::", "usage"}], "MessageName"], "=", 
   "\"\<ScaleFactor specifies the amount to scale a vector in length and may \
be either a number or a pure function.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"ZeroVectorPointSize", "::", "usage"}], "MessageName"], "=", 
   "\"\<ZeroVectorPointSize is the size of the point used to represent a zero \
vector.\>\""}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "Vector", "]"}], "=", 
   RowBox[{
    RowBox[{"Options", "[", "CandMArrow", "]"}], "=", 
    RowBox[{
     RowBox[{"Options", "[", "VectorHead", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"HeadRatio", "\[Rule]", "0.18"}], ",", 
       RowBox[{"TipRatio", "\[Rule]", "0.14"}], ",", 
       RowBox[{"Aperture", "\[Rule]", "0.3"}], ",", 
       RowBox[{"ScaleFactor", "\[Rule]", "1"}], ",", 
       RowBox[{"HeadType", "\[Rule]", "Polygon"}], ",", 
       RowBox[{"ShaftQ", "\[Rule]", "True"}], ",", 
       RowBox[{"EdgesQ", "\[Rule]", "True"}], ",", 
       RowBox[{"VectorColor", "\[Rule]", 
        RowBox[{"RGBColor", "[", 
         RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], ",", 
       RowBox[{"ShaftWidth", "\[Rule]", "0.005"}], ",", 
       RowBox[{"ZeroVectorPointSize", "\[Rule]", "0.01"}]}], "}"}]}]}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"Begin", "[", "\"\<`Private`\>\"", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"ParametricPlot", ",", 
    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"Plot", ",", 
    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"SetOptions", "[", 
   RowBox[{"Graphics", ",", 
    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]}], "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Axes3D", "[", 
    RowBox[{"u_", ",", "v_"}], "]"}], ":=", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", 
              FractionBox["u", "3"]}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"u", ",", "0", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}],
       ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<x\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"u", "+", "v"}], ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", 
              FractionBox["u", "3"]}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "u", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}],
       ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<y\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"u", "+", "v"}], ",", "0"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", 
             RowBox[{"-", 
              FractionBox["u", "3"]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "u"}], "}"}]}], "}"}], "]"}]}], "}"}],
       ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<z\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", 
          RowBox[{"u", "+", "v"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Axes3D", "[", "u_", "]"}], ":=", 
   RowBox[{"Axes3D", "[", 
    RowBox[{"u", ",", 
     FractionBox["u", "8"]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Perpend", "[", 
    RowBox[{"a_", "?", "VectorQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Normalize", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"a", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
       ",", 
       RowBox[{"-", 
        RowBox[{
        "a", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}]}], 
      "}"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "a", "]"}], "\[Equal]", "2"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Perpend", "[", 
    RowBox[{"a_", "?", "VectorQ"}], "]"}], ":=", 
   RowBox[{
    RowBox[{"Normalize", "[", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"a", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], 
        "\[Equal]", "0"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"a", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
         ",", 
         RowBox[{"-", 
          RowBox[{
          "a", "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}]}], ",", 
         "0"}], "}"}]}], "]"}], "]"}], "/;", 
    RowBox[{
     RowBox[{"Length", "[", "a", "]"}], "\[Equal]", "3"}]}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"Base3D", "=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", 
        FractionBox[
         RowBox[{"2", " ", "k", " ", "\[Pi]"}], "8."], "]"}], ",", 
       RowBox[{"Sin", "[", 
        FractionBox[
         RowBox[{"2", " ", "k", " ", "\[Pi]"}], "8."], "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"k", ",", "0", ",", "8"}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"CandMArrow", "[", 
   RowBox[{
    RowBox[{"from_", "?", "VectorQ"}], ",", 
    RowBox[{"to_", "?", "VectorQ"}], ",", "opts___"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sq", ",", "sw", ",", "ht", ",", "hs", ",", "hr", ",", "tr", ",", "ap", 
       ",", "sf", ",", "vc", ",", "zvps", ",", 
       RowBox[{"diff", "=", 
        RowBox[{"to", "-", "from"}]}], ",", "tip"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "sq", ",", "sw", ",", "ht", ",", "hs", ",", "hr", ",", "ts", ",", 
         "tr", ",", "ap", ",", "sf", ",", "vc", ",", "zvps"}], "}"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "ShaftQ", ",", "ShaftWidth", ",", "HeadType", ",", "HeadSize", ",", 
           "HeadRatio", ",", "TipSize", ",", "TipRatio", ",", "Aperture", ",",
            "ScaleFactor", ",", "VectorColor", ",", "ZeroVectorPointSize"}], 
          "}"}], "/.", "\[InvisibleSpace]", 
         RowBox[{"{", "opts", "}"}]}], "/.", "\[InvisibleSpace]", 
        RowBox[{"Options", "[", "Vector", "]"}]}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"from", "\[Equal]", "to"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"Graphics", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "zvps", "]"}], ",", "vc", ",", 
            RowBox[{"Point", "[", "from", "]"}]}], "}"}], "]"}], "]"}]}], 
       "]"}], ";", 
      RowBox[{"diff", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumberQ", "[", 
          RowBox[{"N", "[", "sf", "]"}], "]"}], ",", 
         RowBox[{"sf", " ", "diff"}], ",", 
         RowBox[{"sf", "[", "diff", "]"}]}], "]"}]}], ";", 
      RowBox[{"tip", "=", 
       RowBox[{"from", "+", "diff"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "hs", "]"}], ",", 
        RowBox[{
         RowBox[{"hr", "=", 
          FractionBox["hs", 
           RowBox[{"Norm", "[", "diff", "]"}]]}], ";", 
         RowBox[{"tr", "=", 
          RowBox[{"0.75", " ", "hr"}]}]}]}], "]"}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "ts", "]"}], ",", 
        RowBox[{"tr", "=", 
         FractionBox["ts", 
          RowBox[{"Norm", "[", "diff", "]"}]]}]}], "]"}], ";", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"sq", ",", 
           RowBox[{"{", 
            RowBox[{"vc", ",", 
             RowBox[{"Thickness", "[", "sw", "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{"from", ",", 
                RowBox[{"tip", "-", 
                 RowBox[{"tr", " ", "diff"}]}]}], "}"}], "]"}]}], "}"}], ",", 
           
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"trans", "=", 
             RowBox[{"ap", " ", "hr", " ", 
              RowBox[{"Norm", "[", "diff", "]"}], " ", 
              RowBox[{"Perpend", "[", "diff", "]"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"vc", ",", 
             RowBox[{"Thickness", "[", "sw", "]"}], ",", 
             RowBox[{"ht", "[", 
              RowBox[{"{", 
               RowBox[{"tip", ",", 
                RowBox[{"tip", "-", 
                 RowBox[{"hr", " ", "diff"}], "+", "trans"}], ",", 
                RowBox[{"tip", "-", 
                 RowBox[{"tr", " ", "diff"}]}], ",", 
                RowBox[{"tip", "-", 
                 RowBox[{"hr", " ", "diff"}], "-", "trans"}], ",", "tip"}], 
               "}"}], "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "from", "]"}], "\[Equal]", 
    RowBox[{"Length", "[", "to", "]"}], "\[Equal]", "2"}]}]}], "\n", 
 RowBox[{
  RowBox[{"CandMArrow", "[", 
   RowBox[{
    RowBox[{"from_", "?", "VectorQ"}], ",", 
    RowBox[{"to_", "?", "VectorQ"}], ",", "opts___"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "sq", ",", "eq", ",", "sw", ",", "hs", ",", "hr", ",", "tr", ",", "ap", 
       ",", "sf", ",", "vc", ",", "zvps", ",", 
       RowBox[{"diff", "=", 
        RowBox[{"to", "-", "from"}]}], ",", "tip"}], "}"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
        "sq", ",", "eq", ",", "sw", ",", "hs", ",", "hr", ",", "ap", ",", 
         "sf", ",", "vc", ",", "zvps"}], "}"}], "=", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
          "ShaftQ", ",", "EdgesQ", ",", "ShaftWidth", ",", "HeadSize", ",", 
           "HeadRatio", ",", "Aperture", ",", "ScaleFactor", ",", 
           "VectorColor", ",", "ZeroVectorPointSize"}], "}"}], "/.", 
         "\[InvisibleSpace]", 
         RowBox[{"{", "opts", "}"}]}], "/.", "\[InvisibleSpace]", 
        RowBox[{"Options", "[", "Vector", "]"}]}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"from", "\[Equal]", "to"}], ",", 
        RowBox[{"Return", "[", 
         RowBox[{"Graphics3D", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"PointSize", "[", "zvps", "]"}], ",", "vc", ",", 
            RowBox[{"Point", "[", "from", "]"}]}], "}"}], "]"}], "]"}]}], 
       "]"}], ";", 
      RowBox[{"diff", "=", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"NumberQ", "[", 
          RowBox[{"N", "[", "sf", "]"}], "]"}], ",", 
         RowBox[{"sf", " ", "diff"}], ",", 
         RowBox[{"sf", "[", "diff", "]"}]}], "]"}]}], ";", 
      RowBox[{"tip", "=", 
       RowBox[{"from", "+", "diff"}]}], ";", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"NumberQ", "[", "hs", "]"}], ",", 
        RowBox[{"hr", "=", 
         FractionBox["hs", 
          RowBox[{"Norm", "[", "diff", "]"}]]}]}], "]"}], ";", 
      RowBox[{"tr", "=", 
       FractionBox["hr", "2"]}], ";", 
      RowBox[{"Graphics3D", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{"sq", ",", 
           RowBox[{"{", 
            RowBox[{"vc", ",", 
             RowBox[{"Thickness", "[", "sw", "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"{", 
               RowBox[{"from", ",", 
                RowBox[{"tip", "-", 
                 RowBox[{"tr", " ", "diff"}]}]}], "}"}], "]"}]}], "}"}], ",", 
           
           RowBox[{"{", "}"}]}], "]"}], ",", 
         RowBox[{"If", "[", 
          RowBox[{"eq", ",", 
           RowBox[{"{", "}"}], ",", 
           RowBox[{"EdgeForm", "[", "]"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"SurfaceColor", "[", "vc", "]"}], ",", 
           RowBox[{"With", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"temp", "=", 
               RowBox[{"Perpend", "[", "diff", "]"}]}], "}"}], ",", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"Polygon", "[", 
                 RowBox[{"Append", "[", 
                  RowBox[{"#1", ",", "tip"}], "]"}], "]"}], "&"}], ")"}], "/@", 
              RowBox[{"Partition", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"tip", "-", 
                    RowBox[{"hr", " ", "diff"}], "+", "#1"}], "&"}], ")"}], "/@", 
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"(", 
                    RowBox[{"ap", " ", "hr", " ", 
                    RowBox[{"Norm", "[", "diff", "]"}], " ", "Base3D"}], 
                    ")"}], ".", 
                   RowBox[{"{", 
                    RowBox[{"temp", ",", 
                    RowBox[{"Normalize", "[", 
                    RowBox[{"temp", "\[Cross]", "diff"}], "]"}]}], "}"}]}], 
                  ")"}]}], ",", "2", ",", "1"}], "]"}]}]}], "]"}]}], "}"}]}], 
        "}"}], "]"}]}]}], "]"}], "/;", 
   RowBox[{
    RowBox[{"Length", "[", "from", "]"}], "\[Equal]", 
    RowBox[{"Length", "[", "to", "]"}], "\[Equal]", "3"}]}]}], "\n", 
 RowBox[{
  RowBox[{"Vector", "[", 
   RowBox[{"a_", ",", 
    RowBox[{"Tail", "\[Rule]", "b_"}], ",", "opts___"}], "]"}], ":=", 
  RowBox[{"CandMArrow", "[", 
   RowBox[{"b", ",", 
    RowBox[{"a", "+", "b"}], ",", "opts"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{"Vector", "[", 
   RowBox[{"a_", ",", "opts___"}], "]"}], ":=", 
  RowBox[{"CandMArrow", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{"0", ",", 
      RowBox[{"{", 
       RowBox[{"Length", "[", "a", "]"}], "}"}]}], "]"}], ",", "a", ",", 
    "opts"}], "]"}]}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"VectorHead", "[", 
    RowBox[{"a_", ",", "b_", ",", "opts___"}], "]"}], ":=", 
   RowBox[{"CandMArrow", "[", 
    RowBox[{
     RowBox[{"a", "-", "b"}], ",", "a", ",", 
     RowBox[{"ShaftQ", "\[Rule]", "False"}], ",", "opts"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"End", "[", "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"EndPackage", "[", "]"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{3.502893231567974*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Graphics`Colors`GosiaGreen", "=", 
   RowBox[{"RGBColor", "[", 
    RowBox[{"0", ",", " ", "0.392187", ",", " ", "0"}], "]"}]}], 
  ";"}]], "Input",
 InitializationCell->True]
}, Closed]],

Cell[CellGroupData[{

Cell["ThreeAxes[u,v]", "Subsubsection"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ThreeAxes", "[", 
    RowBox[{"u_", ",", "v_"}], "]"}], ":=", 
   RowBox[{"Graphics3D", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "u"}], ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"u", ",", "0", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}],
       ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<x\>\"", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"u", "+", "v"}], ",", "0", ",", "0"}], "}"}]}], "]"}], ",", 
      
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"-", "u"}], ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "u", ",", "0"}], "}"}]}], "}"}], "]"}]}], "}"}],
       ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<y\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"u", "+", "v"}], ",", "0"}], "}"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"Blue", ",", 
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0", ",", "u"}], "}"}]}], "}"}], "]"}]}], "}"}],
       ",", 
      RowBox[{"Text", "[", 
       RowBox[{"\"\<z\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", 
          RowBox[{"u", "+", "v"}]}], "}"}]}], "]"}]}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ThreeAxes", "[", "u_", "]"}], ":=", 
   RowBox[{"ThreeAxes", "[", 
    RowBox[{"u", ",", 
     FractionBox["u", "8"]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ThreeAxes", "::", "\"\<usage\>\""}], "=", 
   "\"\<ThreeAxes[a,b] makes a standard cartesian axis graphics object with \
x, y, and z running from -a to a, and with axis labels b units beyond the \
tips of the axes.  ThreeAxes[a] is ThreeAxes[a,a/8].\>\""}], ";"}]}], "Input",\

 InitializationCell->True,
 AspectRatioFixed->True]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["T.1)  Making perpendicular projections onto lines", "Subsection",
 CellTags->"MGM.03.T1"],

Cell[CellGroupData[{

Cell["T.1.a)  Projection matrices", "Subsubsection"],

Cell[TextData[{
 "Here are a line through ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"0", ",", "0"}], "}"}]]],
 " and a point not on the line plotted in true scale:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"directionvector", "=", 
    RowBox[{"2", " ", 
     RowBox[{"{", 
      RowBox[{"1.3", ",", "0.8"}], "}"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"givenpoint", "=", 
    RowBox[{"{", 
     RowBox[{"1.0", ",", "2.0"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"lineplot", "=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      StyleBox[
       RowBox[{"t", " ", "directionvector"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Blue"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"pointplot", " ", "=", " ", 
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"PointSize", "[", "0.02", "]"}], ",", "Red", ",", 
       RowBox[{"Point", "[", 
        StyleBox["givenpoint",
         FontColor->RGBColor[0, 0, 1]], "]"}]}], "}"}], "]"}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"setup", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"lineplot", ",", "pointplot"}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell[CellGroupData[{

Cell["\<\
Use a well-chosen perpendicular frame to help come up with a matrix A so that \

             A.givenpoint
is the point on the line that is closest to the given point.\
\>", "Text"],

Cell["Answer:", "Subsubsection"],

Cell["\<\
Make the line's direction vector into a unit vector and plot:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "perpframe", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"perpframe", "[", "1", "]"}], "=", 
    FractionBox["directionvector", 
     SqrtBox[
      RowBox[{"directionvector", ".", "directionvector"}]]]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{"setup", ",", 
    RowBox[{"Vector", "[", 
     RowBox[{
      RowBox[{"perpframe", "[", "1", "]"}], ",", 
      RowBox[{"Tail", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], ",", 
      RowBox[{"VectorColor", "\[Rule]", "Magenta"}], ",", 
      RowBox[{"HeadSize", "\[Rule]", "0.4"}]}], "]"}]}], "]"}], 
  " "}]}], "Input",
 AspectRatioFixed->True],

Cell["Look at:", "SmallText"],

Cell[BoxData[
 RowBox[{"perpframe", "[", "1", "]"}]], "Input",
 AspectRatioFixed->True],

Cell["\<\
To get a perpendicular unit vector, just reverse the components of \
perpframe[1] and throw in a minus sign:\
\>", "SmallText"],

Cell[BoxData[
 RowBox[{
  RowBox[{"perpframe", "[", "2", "]"}], "=", 
  RowBox[{"{", 
   RowBox[{
    StyleBox[
     RowBox[{"-", 
      RowBox[{
       RowBox[{"perpframe", "[", "1", "]"}], "\[LeftDoubleBracket]", "2", 
       "\[RightDoubleBracket]"}]}],
     FontColor->RGBColor[0, 0, 1]], ",", 
    RowBox[{
     RowBox[{"perpframe", "[", "1", "]"}], "\[LeftDoubleBracket]", "1", 
     "\[RightDoubleBracket]"}]}], "}"}]}]], "Input",
 AspectRatioFixed->True],

Cell["And plot:", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"frameplot", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{"perpframe", "[", "1", "]"}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Magenta"}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "0.3"}]}], "]"}], ",", 
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{"perpframe", "[", "2", "]"}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Magenta"}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "0.3"}]}], "]"}]}], "}"}]}], ";"}], 
  " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{"setup", ",", "frameplot"}], "]"}], " "}]}], "Input",
 AspectRatioFixed->True],

Cell["perpframe[1] points in the direction of the line.", "Special5"],

Cell[TextData[{
 "To get the point on the line closest to the given point, make a matrix \n   \
     A = hanger.stretcher.aligner \nthat preserves lengths in the direction \
of perpframe[1] but zeroes out all lengths in the direction of perpframe[2]: \
\nThis means you want\n      A.",
 StyleBox["perpframe[1]",
  FontColor->RGBColor[0, 0, 1]],
 " = ",
 StyleBox["1.0",
  FontColor->RGBColor[1, 0, 1]],
 " ",
 StyleBox["perframe[1]",
  FontColor->RGBColor[0, 0, 1]],
 "\n      A.",
 StyleBox["perpframe[2]",
  FontColor->RGBColor[0, 0, 1]],
 " = ",
 StyleBox["0.0 ",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["perframe[2].",
  FontColor->RGBColor[0, 0, 1]],
 "\nSo you go with:"
}], "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"aligner", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"perpframe", "[", "1", "]"}], ",", 
       RowBox[{"perpframe", "[", "2", "]"}]}], "}"}]}],
    FontColor->RGBColor[0, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xstretch", ",", "ystretch"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}]}], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"stretcher", "=", 
     RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
        {"xstretch", "0"},
        {"0", "ystretch"}
       }], "\[NegativeThinSpace]", ")"}]}], ";"}], " "}],
  FontColor->RGBColor[1, 0, 1]], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"hanger", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"perpframe", "[", "1", "]"}], ",", 
        RowBox[{"perpframe", "[", "2", "]"}]}], "}"}], "]"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", "=", 
    RowBox[{"hanger", ".", "stretcher", ".", "aligner"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{"MatrixForm", "[", "A", "]"}]}], "Input",
 AspectRatioFixed->True],

Cell["Hit the given point with A and plot:", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"hitplot", "=", 
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{"Orange", ",", 
       RowBox[{"PointSize", "[", "0.04", "]"}], ",", 
       RowBox[{"Point", "[", 
        RowBox[{"A", ".", "givenpoint"}], "]"}]}], "}"}], "]"}]}], ";"}], " ",
   "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{"setup", ",", "frameplot", ",", "hitplot"}], "]"}], 
  " "}]}], "Input",
 AspectRatioFixed->True],

Cell["Nice.  Give it the acid test:", "SmallText"],

Cell[BoxData[
 RowBox[{"Chop", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     StyleBox["givenpoint",
      FontColor->RGBColor[0.889998, 0.149996, 0.209995]], "-", 
     StyleBox[
      RowBox[{"A", ".", "givenpoint"}],
      FontColor->RGBColor[1, 0.379995, 0.00999466]]}], ")"}], ".", 
   StyleBox[
    RowBox[{"perpframe", "[", "1", "]"}],
    FontColor->RGBColor[1, 0, 1]]}], 
  StyleBox["]",
   FontColor->GrayLevel[0]]}]], "Input",
 AspectRatioFixed->True],

Cell["\<\
This confirms that the vector running from A.givenpoint to givenpoint is \
perpendicular to the line and, as you know, the shortest distance from the \
line to the given point is the perpendicular distance.\
\>", "SmallText"],

Cell["See this projection matrix do its work in this action movie:", \
"SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "x", ",", "y", ",", "t", ",", "hitplotter", ",", "hitpointplotter", ",", 
     "pointcolor", ",", "actionarrows", ",", "matrix2D"}], "]"}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"2", " ", "\[Pi]"}]}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ranger", "=", "3"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], "=", 
    RowBox[{
     RowBox[{"3", " ", 
      RowBox[{"Cos", "[", "t", "]"}], " ", 
      RowBox[{"perpframe", "[", "1", "]"}]}], "  ", "+", 
     RowBox[{
      RowBox[{"Sin", "[", "t", "]"}], " ", 
      RowBox[{"perpframe", "[", "2", "]"}]}]}]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointcolor", "[", "t_", "]"}], "=", 
    RowBox[{"RGBColor", "[", 
     RowBox[{
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Cos", "[", "t", "]"}], "+", "1"}], ")"}]}], ",", 
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Sin", "[", "t", "]"}], "+", "1"}], ")"}]}], ",", "0"}], 
     "]"}]}], ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"jump", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "36"]}], ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitplotter", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"matrix2D", ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x", "[", "t", "]"}], ",", 
         RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Blue"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "ranger"}], ",", "ranger"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "ranger"}], ",", "ranger"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitpointplotter", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pointcolor", "[", "t", "]"}], ",", 
         RowBox[{"PointSize", "[", "0.035", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"matrix2D", ".", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", 
        RowBox[{"thigh", "-", "jump"}], ",", "jump"}], "}"}]}], "]"}]}], 
   ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"actionarrows", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"matrix2D", ".", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", 
         RowBox[{"pointcolor", "[", "t", "]"}]}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "0.25"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", 
        RowBox[{"thigh", "-", "jump"}], ",", "jump"}], "}"}]}], "]"}]}], 
   ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"before", "=", 
    RowBox[{"Show", "[", 
     RowBox[{"lineplot", ",", 
      RowBox[{"hitplotter", "[", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
      RowBox[{"hitpointplotter", "[", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Before\>\""}], ",", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "2"}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"action", " ", "=", 
    RowBox[{"Show", "[", 
     RowBox[{"lineplot", ",", "before", ",", 
      RowBox[{"actionarrows", "[", "A", "]"}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Action plot\>\""}], ",", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "2"}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"after", "=", 
    RowBox[{"Show", "[", 
     RowBox[{"lineplot", ",", 
      RowBox[{"hitplotter", "[", "A", "]"}], ",", 
      RowBox[{"hitpointplotter", "[", "A", "]"}], ",", 
      RowBox[{"PlotRange", "->", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "2"}], ",", "2"}], "}"}]}], ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<After the hit\>\""}]}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{"{", 
   RowBox[{"before", ",", " ", "action", ",", " ", "after"}], "}"}], 
  "]"}]}], "Input",
 AspectRatioFixed->True,
 AnimationDisplayTime->1]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
T.2) More on reflection matrices ( flippers).
Making matrices for bouncing light rays off curves\
\>", "Subsection",
 CellTags->"MGM.03.T2"],

Cell[CellGroupData[{

Cell["T.2.a) Flipping a curve over a line with a matrix hit", "Subsubsection"],

Cell["Here's a curve shown together with a line through {0,0}:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{"x", ",", "y", ",", "t", ",", "line", ",", "s"}], "]"}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"line", "[", "s_", "]"}], "=", 
    RowBox[{"s", " ", 
     RowBox[{"{", 
      RowBox[{"2.09", ",", "1.76"}], "}"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"lineplot", "=", 
    RowBox[{"Graphics", "[", 
     RowBox[{"Line", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"line", "[", 
         RowBox[{"-", "1"}], "]"}], ",", 
        RowBox[{"line", "[", "1", "]"}]}], "}"}], "]"}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", 
      RowBox[{"2", " ", "\[Pi]"}]}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ranger", "=", "3.0"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1.2"}], "}"}], "+", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", " ", 
        RowBox[{"Sin", "[", "t", "]"}], " ", 
        RowBox[{"Cos", "[", "t", "]"}], " ", 
        RowBox[{"(", 
         RowBox[{"0.6", "-", 
          RowBox[{"Cos", "[", 
           RowBox[{"3", " ", "t"}], "]"}]}], ")"}]}], ",", 
       RowBox[{"Sin", "[", "t", "]"}]}], "}"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "hitplotter", ",", "hitpointplotter", ",", "pointcolor", ",", 
     "actionarrows", ",", "matrix2D"}], "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointcolor", "[", "t_", "]"}], "=", 
    RowBox[{"RGBColor", "[", 
     RowBox[{
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Cos", "[", "t", "]"}], "+", "1"}], ")"}]}], ",", 
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Sin", "[", "t", "]"}], "+", "1"}], ")"}]}], ",", "0"}], 
     "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"jump", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "12"]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitplotter", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"matrix2D", ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x", "[", "t", "]"}], ",", 
         RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Blue"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "ranger"}], ",", "ranger"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "ranger"}], ",", "ranger"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitpointplotter", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pointcolor", "[", "t", "]"}], ",", 
         RowBox[{"PointSize", "[", "0.035", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"matrix2D", ".", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", 
        RowBox[{"thigh", "-", "jump"}], ",", "jump"}], "}"}]}], "]"}]}], 
   ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"actionarrows", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"matrix2D", ".", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", 
         RowBox[{"pointcolor", "[", "t", "]"}]}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", 
        RowBox[{"thigh", "-", "jump"}], ",", "jump"}], "}"}]}], "]"}]}], 
   ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"before", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplotter", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
    RowBox[{"hitpointplotter", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", "lineplot", ",", 
    RowBox[{"PlotLabel", "\[Rule]", "\"\<Before\>\""}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell[CellGroupData[{

Cell["\<\
Use a frame flipper matrix hit to pick up the curve and flip it over the \
plotted line to get its mirror image with respect to the plotted line.\
\>", "Text"],

Cell["Answer:", "Special1"],

Cell["\<\
This is a job for a perpendicular frame. To get a good one, look at the \
parameterization of the line:\
\>", "SmallText"],

Cell[BoxData[
 RowBox[{"line", "[", "s", "]"}]], "Input",
 AspectRatioFixed->True],

Cell["A unit vector pointing in the direction of the line is:", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "perpframe", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{"perpframe", "[", "1", "]"}], "=", 
  FractionBox[
   RowBox[{"line", "[", "1.0", "]"}], 
   SqrtBox[
    RowBox[{
     RowBox[{"line", "[", "1.0", "]"}], ".", 
     RowBox[{"line", "[", "1.0", "]"}]}]]]}]}], "Input",
 AspectRatioFixed->True],

Cell["A unit vector perpendicular to perpframe[1] is:", "SmallText"],

Cell[BoxData[
 RowBox[{
  RowBox[{"perpframe", "[", "2", "]"}], "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     StyleBox["-",
      FontColor->RGBColor[1, 0, 0]], 
     RowBox[{
      RowBox[{"perpframe", "[", "1", "]"}], "\[LeftDoubleBracket]", "2", 
      "\[RightDoubleBracket]"}]}], ",", 
    RowBox[{
     RowBox[{"perpframe", "[", "1", "]"}], "\[LeftDoubleBracket]", "1", 
     "\[RightDoubleBracket]"}]}], "}"}]}]], "Input",
 AspectRatioFixed->True],

Cell["\<\
Now use the matrix maker to define your frame flipper matrix: \
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "alignerframe", "]"}], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", "1", "]"}], ",", 
       RowBox[{"alignerframe", "[", "2", "]"}]}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"perpframe", "[", "1", "]"}], ",", 
       RowBox[{"perpframe", "[", "2", "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"aligner", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", "1", "]"}], ",", 
       RowBox[{"alignerframe", "[", "2", "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "hangerframe", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"hangerframe", "[", "1", "]"}], ",", 
       RowBox[{"hangerframe", "[", "2", "]"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["{",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox[
       RowBox[{"perpframe", "[", "1", "]"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox["-",
        FontColor->RGBColor[1, 0, 0]], 
       StyleBox[
        RowBox[{"perpframe", "[", "2", "]"}],
        FontColor->RGBColor[0, 0, 1]]}]}], 
     StyleBox["}",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"hanger", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hangerframe", "[", "1", "]"}], ",", 
        RowBox[{"hangerframe", "[", "2", "]"}]}], "}"}], "]"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", "=", 
    RowBox[{"hanger", ".", "stretcher", ".", "aligner"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{"MatrixForm", "[", "A", "]"}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
Note the minus sign in the specification of the hanger frame.\
\>", "Special5"],

Cell["\<\
Check it out, remembering that perpframe[1] points in the direction of the \
line and perpframe[2] is perpendicular to the line:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"A", ".", 
   RowBox[{"perpframe", "[", "1", "]"}]}], "==", 
  RowBox[{"perpframe", "[", "1", "]"}]}], "\n", 
 RowBox[{
  RowBox[{"A", ".", 
   RowBox[{"perpframe", "[", "2", "]"}]}], "==", 
  RowBox[{
   StyleBox["-",
    FontColor->RGBColor[1, 0, 0]], 
   RowBox[{"perpframe", "[", "2", "]"}]}]}]}], "Input",
 AspectRatioFixed->True],

Cell["Now watch what a hit with A does to the curve:", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"after", "=", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"hitplotter", "[", "A", "]"}], ",", 
      RowBox[{"hitpointplotter", "[", "A", "]"}], ",", "lineplot", ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<After\>\""}]}], "]"}]}], ";"}], 
  " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{"{", 
   RowBox[{"before", ",", " ", "after"}], "}"}], "]"}]}], "Input",
 AspectRatioFixed->True,
 AnimationDisplayTime->0.133333],

Cell["Watch that puppy do a flip.", "SmallText"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["T.2.b.i) Bouncing light rays off a curve", "Subsubsection"],

Cell["\<\
For full understanding, you should be familiar with part a) above.\
\>", "Special5"],

Cell["\<\
Here's a curve and a point above the curve all plotted in true scale:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{"x", ",", "y", ",", "t"}], "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0.6"}], "}"}], "+", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", " ", "t"}], ",", 
       RowBox[{
        RowBox[{"-", "1.6"}], " ", 
        RowBox[{"Sin", "[", "t", "]"}]}]}], "}"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"point", "=", 
    RowBox[{"{", 
     RowBox[{"3.5", ",", "3.0"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", "\[Pi]"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"curveplot", "=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"{", 
       StyleBox[
        RowBox[{
         RowBox[{"x", "[", "t", "]"}], ",", 
         RowBox[{"y", "[", "t", "]"}]}],
        FontColor->RGBColor[0, 0, 1]], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"Blue", ",", 
          RowBox[{"Thickness", "[", "0.005", "]"}]}], "}"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "4"}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"pointplot", "=", 
    RowBox[{"Graphics", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Darker", "[", "Red", "]"}], ",", 
       RowBox[{"PointSize", "[", "0.03", "]"}], ",", 
       RowBox[{"Point", "[", "point", "]"}]}], "}"}], "]"}]}], ";"}], " ", 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"curveplot", ",", "pointplot", ",", " ", 
   RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
Light rays emanate from the point and hit the curve like this:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "ray", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ray", "[", "t_", "]"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], ",", 
       RowBox[{"y", "[", "t", "]"}]}], "}"}], "-", "point"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"jump", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "6"]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"rayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{"ray", "[", "t", "]"}], ",", 
        RowBox[{"Tail", "\[Rule]", "point"}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Orange"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"setup", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"curveplot", ",", "pointplot", ",", "rayplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell[CellGroupData[{

Cell["Your job is to plot the reflected light rays.  Do it.", "Text"],

Cell["Answer:", "Special1"],

Cell["\<\
Throw in these tangential (perpframe[1,t]) and normal (perpframe[2,t]) \
perpendicular frames:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "perpframe", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"perpframe", "[", 
     RowBox[{"1", ",", "t_"}], "]"}], "=", 
    FractionBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SuperscriptBox["x", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], ",", 
       RowBox[{
        SuperscriptBox["y", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "}"}], 
     SqrtBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "}"}], ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "}"}]}]]]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"perpframe", "[", 
     RowBox[{"2", ",", "t_"}], "]"}], "=", 
    FractionBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         SuperscriptBox["y", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}], ",", 
       RowBox[{
        SuperscriptBox["x", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "}"}], 
     SqrtBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{"-", 
          RowBox[{
           SuperscriptBox["x", "\[Prime]",
            MultilineFunction->None], "[", "t", "]"}]}]}], "}"}], ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{"-", 
          RowBox[{
           SuperscriptBox["x", "\[Prime]",
            MultilineFunction->None], "[", "t", "]"}]}]}], "}"}]}]]]}], ";"}],
   " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"frameplots", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Vector", "[", 
         RowBox[{
          RowBox[{"perpframe", "[", 
           RowBox[{"1", ",", "t"}], "]"}], ",", 
          RowBox[{"Tail", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
          RowBox[{"VectorColor", "\[Rule]", "Magenta"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
       "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Vector", "[", 
         RowBox[{
          RowBox[{"perpframe", "[", 
           RowBox[{"2", ",", "t"}], "]"}], ",", 
          RowBox[{"Tail", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
          RowBox[{"VectorColor", "\[Rule]", "Magenta"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
       "]"}]}], "}"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"step1", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
   "curveplot", ",", "pointplot", ",", "rayplots", ",", "frameplots", ",", 
    " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
perpframe[1,t] is tangent to the curve at {x[t],y[t]}.
perpframe[1,t] is perpendicular to the curve at {x[t],y[t]}.\
\>", "Special5"],

Cell["Now reverse the light vectors:", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reversedrayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         StyleBox["-",
          FontColor->RGBColor[0, 0, 1]], 
         RowBox[{
          StyleBox["ray",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["[",
           FontColor->RGBColor[0, 0, 1]], 
          StyleBox["t",
           FontColor->RGBColor[0, 0, 1]], "]"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Orange"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\n", 
 RowBox[{"step2", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
   "curveplot", ",", "pointplot", ",", "reversedrayplots", ",", "frameplots", 
    ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
These are not the reflected rays, but the reflected rays do make the same \
angle with the plotted normals that these vectors make.
This tells you that to get the reflected rays, all you have to do is to hit \
the -ray[t] vectors with frame flipper matrices to flip -ray[t] about \
perpframe[2,t].
  
Here you go:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "alignerframe", ",", "hangerframe", ",", "aligner", ",", "hanger", ",", 
     "frameflipper"}], "]"}], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", 
        RowBox[{"1", ",", "t_"}], "]"}], ",", 
       RowBox[{"alignerframe", "[", 
        RowBox[{"2", ",", "t_"}], "]"}]}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"perpframe", "[", 
        RowBox[{"1", ",", "t"}], "]"}], ",", 
       RowBox[{"perpframe", "[", 
        RowBox[{"2", ",", "t"}], "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"aligner", "[", "t_", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", 
        RowBox[{"1", ",", "t"}], "]"}], ",", 
       RowBox[{"alignerframe", "[", 
        RowBox[{"2", ",", "t"}], "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", "=", 
     RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
        {"1", "0"},
        {"0", "1"}
       }], "\[NegativeThinSpace]", ")"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"hangerframe", "[", 
        RowBox[{"1", ",", "t_"}], "]"}], ",", 
       RowBox[{"hangerframe", "[", 
        RowBox[{"2", ",", "t_"}], "]"}]}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"perpframe", "[", 
         RowBox[{"1", ",", "t"}], "]"}]}], ",", 
       RowBox[{"perpframe", "[", 
        RowBox[{"2", ",", "t"}], "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{"hanger", "[", "t_", "]"}], "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hangerframe", "[", 
         RowBox[{"1", ",", "t"}], "]"}], ",", 
        RowBox[{"hangerframe", "[", 
         RowBox[{"2", ",", "t"}], "]"}]}], "}"}], "]"}]}],
    FontColor->RGBColor[0, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"frameflipper", "[", "t_", "]"}], "=", 
    RowBox[{
     RowBox[{"hanger", "[", "t", "]"}], ".", "stretcher", ".", 
     RowBox[{"aligner", "[", "t", "]"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reflectedrayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         StyleBox[
          RowBox[{"frameflipper", "[", "t", "]"}],
          FontColor->RGBColor[0, 0, 1]], ".", 
         RowBox[{"(", 
          RowBox[{"-", 
           RowBox[{"ray", "[", "t", "]"}]}], ")"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Black"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"step3", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
   "curveplot", ",", "reversedrayplots", ",", "reflectedrayplots", ",", 
    "frameplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
Note the extra minus sign in the specification of the hangerframe.
That's what gives you the flip.\
\>", "Special5"],

Cell["\<\
Clean it up with a plot showing both the incoming rays and the reflected rays:\
\>", "SmallText"],

Cell[BoxData[
 RowBox[{"finalproduct", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"curveplot", ",", "rayplots", ",", "reflectedrayplots", ",", 
    RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]], "Input",
 AspectRatioFixed->True],

Cell["\<\
If you want to lengthen the reflected rays, you can.
Just do this:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"scalefactor", "=", "2.0"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scaledreflectedrayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"frameflipper", "[", "t", "]"}], ".", 
         RowBox[{"(", 
          RowBox[{"-", 
           RowBox[{"ray", "[", "t", "]"}]}], ")"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"ScaleFactor", "\[Rule]", "scalefactor"}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Black"}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "0.9"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"curveplot", ",", "rayplots", ",", "scaledreflectedrayplots", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 AspectRatioFixed->True],

Cell["And you're out of here.", "SmallText"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["T.2.b.ii) When the light source is far away", "Subsubsection"],

Cell["\<\
Here's the same curve and parallel light rays coming from a distant source:\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{"x", ",", "y", ",", "t", ",", "ray"}], "]"}], ";"}], " "}], "\n", 

 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], " ", "+", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", " ", "t"}], ",", 
       RowBox[{"0.8", " ", 
        RowBox[{"Cos", "[", 
         RowBox[{"2", "t"}], "]"}]}]}], "}"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{"0", ",", "\[Pi]"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"curveplot", "=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"x", "[", "t", "]"}], ",", 
        RowBox[{"y", "[", "t", "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{"Blue", ",", 
          RowBox[{"Thickness", "[", "0.005", "]"}]}], "}"}], "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "10"}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"ray", "[", "t_", "]"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], ",", 
       RowBox[{"y", "[", "t", "]"}]}], "}"}], "-", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], ",", "10"}], "}"}]}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"jump", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "8"]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"rayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{"ray", "[", "t", "]"}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", "10"}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Orange"}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "1"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\n", 
 RowBox[{"setup", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"curveplot", ",", "rayplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell[CellGroupData[{

Cell["Your job is to plot the reflected light rays.  Do it.", "Text"],

Cell["Answer:", "Special1"],

Cell["This is a copy, paste and edit job on part i).", "Special5"],

Cell["\<\
Throw in these tangential (perpframe[1,t]) and normal (perpframe[2,t]) \
perpendicular frames:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "perpframe", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"perpframe", "[", 
     RowBox[{"1", ",", "t_"}], "]"}], "=", 
    FractionBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        SuperscriptBox["x", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}], ",", 
       RowBox[{
        SuperscriptBox["y", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "}"}], 
     SqrtBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "}"}], ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["x", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}]}], "}"}]}]]]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"perpframe", "[", 
     RowBox[{"2", ",", "t_"}], "]"}], "=", 
    FractionBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{
         SuperscriptBox["y", "\[Prime]",
          MultilineFunction->None], "[", "t", "]"}]}], ",", 
       RowBox[{
        SuperscriptBox["x", "\[Prime]",
         MultilineFunction->None], "[", "t", "]"}]}], "}"}], 
     SqrtBox[
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{"-", 
          RowBox[{
           SuperscriptBox["x", "\[Prime]",
            MultilineFunction->None], "[", "t", "]"}]}]}], "}"}], ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          SuperscriptBox["y", "\[Prime]",
           MultilineFunction->None], "[", "t", "]"}], ",", 
         RowBox[{"-", 
          RowBox[{
           SuperscriptBox["x", "\[Prime]",
            MultilineFunction->None], "[", "t", "]"}]}]}], "}"}]}]]]}], ";"}],
   " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"frameplots", "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Vector", "[", 
         RowBox[{
          RowBox[{"perpframe", "[", 
           RowBox[{"1", ",", "t"}], "]"}], ",", 
          RowBox[{"Tail", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
          RowBox[{"VectorColor", "\[Rule]", "Magenta"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
       "]"}], ",", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"Vector", "[", 
         RowBox[{
          RowBox[{"perpframe", "[", 
           RowBox[{"2", ",", "t"}], "]"}], ",", 
          RowBox[{"Tail", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
          RowBox[{"VectorColor", "\[Rule]", "Magenta"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
       "]"}]}], "}"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"step1", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"curveplot", ",", "rayplots", ",", "frameplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell["perpframe[1,t] is tangent to the curve at {x[t],y[t]}.", "Special5"],

Cell["Now reverse the light vectors:", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"reversedrayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{"-", 
         RowBox[{"ray", "[", "t", "]"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Orange"}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "1"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\n", 
 RowBox[{"step2", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
   "curveplot", ",", "reversedrayplots", ",", "frameplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
These are not the reflected rays, but the reflected rays do make the same \
angle with the plotted normals that these vectors make.
This tells you that to get the reflected rays, all you have to do is to hit \
the -ray[t] vectors with frame flipper matrices to flip -ray[t] about \
perpframe[2,t].
  
Here you go:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "alignerframe", ",", "hangerframe", ",", "aligner", ",", "hanger", ",", 
     "frameflipper"}], "]"}], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", 
        RowBox[{"1", ",", "t_"}], "]"}], ",", 
       RowBox[{"alignerframe", "[", 
        RowBox[{"2", ",", "t_"}], "]"}]}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"perpframe", "[", 
        RowBox[{"1", ",", "t"}], "]"}], ",", 
       RowBox[{"perpframe", "[", 
        RowBox[{"2", ",", "t"}], "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"aligner", "[", "t_", "]"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", 
        RowBox[{"1", ",", "t"}], "]"}], ",", 
       RowBox[{"alignerframe", "[", 
        RowBox[{"2", ",", "t"}], "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", "=", 
     RowBox[{"(", "\[NegativeThinSpace]", GridBox[{
        {"1", "0"},
        {"0", "1"}
       }], "\[NegativeThinSpace]", ")"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"hangerframe", "[", 
        RowBox[{"1", ",", "t_"}], "]"}], ",", 
       RowBox[{"hangerframe", "[", 
        RowBox[{"2", ",", "t_"}], "]"}]}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"perpframe", "[", 
         RowBox[{"1", ",", "t"}], "]"}]}], ",", 
       RowBox[{"perpframe", "[", 
        RowBox[{"2", ",", "t"}], "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{
     RowBox[{"hanger", "[", "t_", "]"}], "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hangerframe", "[", 
         RowBox[{"1", ",", "t"}], "]"}], ",", 
        RowBox[{"hangerframe", "[", 
         RowBox[{"2", ",", "t"}], "]"}]}], "}"}], "]"}]}],
    FontColor->RGBColor[0, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"frameflipper", "[", "t_", "]"}], "=", 
    RowBox[{
     RowBox[{"hanger", "[", "t", "]"}], ".", "stretcher", ".", 
     RowBox[{"aligner", "[", "t", "]"}]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"reflectedrayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         StyleBox[
          RowBox[{"frameflipper", "[", "t", "]"}],
          FontColor->RGBColor[0, 0, 1]], ".", 
         RowBox[{"(", 
          RowBox[{"-", 
           RowBox[{"ray", "[", "t", "]"}]}], ")"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Black"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"step3", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
   "curveplot", ",", "reversedrayplots", ",", "reflectedrayplots", ",", 
    "frameplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]}], "Input",
 AspectRatioFixed->True],

Cell["\<\
Clean it up with a plot showing both the incoming rays and the reflected rays:\
\>", "SmallText"],

Cell[BoxData[
 RowBox[{"finalproduct", "=", 
  RowBox[{"Show", "[", 
   RowBox[{"curveplot", ",", "rayplots", ",", "reflectedrayplots", ",", " ", 
    RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}]}]], "Input",
 AspectRatioFixed->True],

Cell["\<\
If you want to lengthen the reflected rays, you can.
Just do this:\
\>", "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"scalefactor", "=", "2.0"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"scaledreflectedrayplots", "=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"frameflipper", "[", "t", "]"}], ".", 
         RowBox[{"(", 
          RowBox[{"-", 
           RowBox[{"ray", "[", "t", "]"}]}], ")"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"ScaleFactor", "\[Rule]", "scalefactor"}], ",", 
        RowBox[{"VectorColor", "\[Rule]", "Black"}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "1"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", "jump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\n"}], "\[IndentingNewLine]", 
 RowBox[{"Show", "[", 
  RowBox[{"curveplot", ",", "rayplots", ",", "scaledreflectedrayplots", ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "Input",
 AspectRatioFixed->True],

Cell["And you're out of here.", "SmallText"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "T.3)  Aligners and hangers made with",
 StyleBox[" right",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frames are ",
 StyleBox["rotation",
  FontColor->RGBColor[0, 0, 1]],
 " matrices;  Aligners and hangers made with",
 StyleBox[" left",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frames are ",
 StyleBox["not",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" rotation",
  FontColor->RGBColor[0, 0, 1]],
 " matrices",
 "; ",
 " they are reflection matrices (flippers)"
}], "Subsection",
 CellTags->"MGM.03.T3"],

Cell[CellGroupData[{

Cell["\<\
T.3.a.i) Hangers corresponding to left hand perpendicular frames are not \
rotations;  they are pure flippers (reflection matrices)\
\>", "Subsubsection"],

Cell["\<\
You already know that aligners and hangers based on right hand perpendicular \
frames are rotation matrices.

In this problem you are going to look into the math behind what happens when \
you hit with aligners and hangers based on left hand perpendicular frames.

To get the ball off the ground, here's a left hand perpendicular frame and an \
action movie showing what a hit with the hanger corresponding to this \
perpendicular frame does to a sample curve\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", 
    FractionBox["\[Pi]", "3"]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"perpframe", "[", "1", "]"}], ",", 
      RowBox[{"perpframe", "[", "2", "]"}]}], "}"}], " ", "=", " ", "\n", 
    "          ", 
    RowBox[{"N", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
       RowBox[{
        StyleBox["-",
         FontColor->RGBColor[1, 0, 0]], 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}]}], "}"}], "]"}]}], 
   ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"frameplot", " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Table", "[", "\n", "     ", 
       RowBox[{
        RowBox[{"Vector", "[", 
         RowBox[{
          RowBox[{"perpframe", "[", "k", "]"}], ",", 
          RowBox[{"Tail", "->", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], ",", 
          RowBox[{"VectorColor", "->", "Purple"}], ",", 
          RowBox[{"HeadSize", "->", "0.2"}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"k", ",", "1", ",", "2"}], "}"}]}], "]"}], ",", " ", "\n", 
      "     ", 
      RowBox[{"Graphics", "[", 
       RowBox[{"Text", "[", 
        RowBox[{"\"\<perpframe[1]\>\"", ",", 
         RowBox[{"0.6", " ", 
          RowBox[{"perpframe", "[", "1", "]"}]}]}], "]"}], "]"}], ",", "\n", 
      "     ", 
      RowBox[{"Graphics", "[", 
       RowBox[{"Text", "[", 
        RowBox[{"\"\<perpframe[2]\>\"", ",", 
         RowBox[{"0.6", " ", 
          RowBox[{"perpframe", "[", "2", "]"}]}]}], "]"}], "]"}]}], "}"}]}], 
   ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"hanger", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"perpframe", "[", "1", "]"}], ",", 
        RowBox[{"perpframe", "[", "2", "]"}]}], "}"}], "]"}]}],
    FontColor->RGBColor[0, 0, 1]], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", "=", "hanger"}], ";"}], "  ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "x", ",", "y", ",", "t", ",", "hitplotter", ",", "hitpointplotter", ",", 
     "pointcolor", ",", "actionarrows", ",", "matrix2D"}], "]"}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], "=", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"ranger", "=", "5"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], "=", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "1"}], ",", "1"}], "}"}], " ", "+", 
     RowBox[{"3", " ", 
      RowBox[{"Cos", "[", 
       RowBox[{"4", " ", "t"}], "]"}], " ", 
      RowBox[{"perpframe", "[", "1", "]"}]}], " ", "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"1.5", "  ", 
         RowBox[{"Sin", "[", 
          RowBox[{"5", " ", "t"}], "]"}]}], " ", "-", " ", "1"}], ")"}], 
      RowBox[{"perpframe", "[", "2", "]"}]}]}]}], ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointcolor", "[", "t_", "]"}], "=", 
    RowBox[{"RGBColor", "[", 
     RowBox[{
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"3", "t"}], "]"}], "+", "1"}], ")"}]}], ",", 
      RowBox[{"0.5", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"Sin", "[", 
          RowBox[{"3", "t"}], "]"}], "+", "1"}], ")"}]}], ",", "0"}], "]"}]}],
    ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"jump", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "24"]}], ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitplotter", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"matrix2D", ".", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"x", "[", "t", "]"}], ",", 
         RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Blue"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "ranger"}], ",", "ranger"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", "ranger"}], ",", "ranger"}], "}"}]}], "}"}]}], ",", 
      RowBox[{"AxesLabel", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitpointplotter", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"pointcolor", "[", "t", "]"}], ",", 
         RowBox[{"PointSize", "[", "0.035", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"matrix2D", ".", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
      ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", 
        RowBox[{"thigh", "-", "jump"}], ",", "jump"}], "}"}]}], "]"}]}], 
   ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"actionarrows", "[", "matrix2D_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Vector", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"matrix2D", ".", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"Tail", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"VectorColor", "\[Rule]", 
         RowBox[{"pointcolor", "[", "t", "]"}]}], ",", 
        RowBox[{"HeadSize", "\[Rule]", "0.25"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", 
        RowBox[{"thigh", "-", "jump"}], ",", "jump"}], "}"}]}], "]"}]}], 
   ";"}], " ", "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"before", "=", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"hitplotter", "[", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
      RowBox[{"hitpointplotter", "[", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", "frameplot", 
      ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Before\>\""}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"action", "=", 
    RowBox[{"Show", "[", 
     RowBox[{"before", ",", 
      RowBox[{"actionarrows", "[", "A", "]"}], ",", "frameplot", ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Action plot\>\""}]}], "]"}]}], 
   ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"after", "=", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"hitplotter", "[", "A", "]"}], ",", 
      RowBox[{"hitpointplotter", "[", "A", "]"}], ",", "frameplot", ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<After the hit\>\""}]}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{"{", 
   RowBox[{"before", ",", " ", "action", ",", " ", "after"}], "}"}], 
  "]"}]}], "Input",
 CellChangeTimes->{3.503233402902216*^9},
 AnimationDisplayTime->1],

Cell["\<\
The visual evidence is that hits with this hanger based on a left hand \
perpendicular frame is a flipper matrix (reflection matrix). 

The goal here is to look into the math behind this in order to find out what \
line that matrix is flipping over.

The left hand frame used here is\
\>", "Text"],

Cell[TextData[{
 "               ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "s", "]"}], ",", 
      RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
    RowBox[{
     StyleBox["-",
      FontColor->RGBColor[1, 0, 0]], 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"s", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"s", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}]}], "}"}]]],
 " "
}], "Text"],

Cell[TextData[{
 "with s =",
 Cell[BoxData[
  RowBox[{
   FractionBox["\[Pi]", "3"], "."}]]],
 " \nThrow into the action movie a plot of the line through {0,0} running in \
the direction of"
}], "Text"],

Cell[TextData[{
 "                ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Cos", "[", 
     StyleBox[
      FractionBox["s", "2"],
      FontColor->RGBColor[1, 0, 0]], "]"}], ",", 
    RowBox[{"Sin", "[", 
     StyleBox[
      FractionBox["s", "2"],
      FontColor->RGBColor[1, 0, 0]], "]"}]}], "}"}]]],
 ":"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "t", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["lineplot",
     FontColor->RGBColor[0, 0, 1]], " ", "=", " ", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"t", " ", 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           FractionBox["s", "2"], "]"}], ",", 
          RowBox[{"Sin", "[", 
           FractionBox["s", "2"], "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", 
        RowBox[{"-", "5"}], ",", "5"}], "}"}], ",", 
      RowBox[{"PlotStyle", "->", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Magenta"}], "}"}], 
        "}"}]}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"before", "=", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"hitplotter", "[", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
      RowBox[{"hitpointplotter", "[", 
       RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", "frameplot", 
      ",", "lineplot", ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Before\>\""}]}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"action", "=", 
    RowBox[{"Show", "[", 
     RowBox[{"before", ",", 
      RowBox[{"actionarrows", "[", "A", "]"}], ",", "frameplot", ",", 
      "lineplot", ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<Action plot\>\""}]}], "]"}]}], 
   ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"after", "=", 
    RowBox[{"Show", "[", 
     RowBox[{
      RowBox[{"hitplotter", "[", "A", "]"}], ",", 
      RowBox[{"hitpointplotter", "[", "A", "]"}], ",", "frameplot", ",", 
      "lineplot", ",", 
      RowBox[{"PlotLabel", "\[Rule]", "\"\<After the hit\>\""}]}], "]"}]}], 
   ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{"{", 
   RowBox[{"before", ",", " ", "action", ",", " ", "after"}], "}"}], 
  "]"}]}], "Input",
 AnimationDisplayTime->2],

Cell["\<\
You betcha.
 The hit with the hanger corresponding to this left hand frame\
\>", "Text"],

Cell[TextData[{
 "               ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "s", "]"}], ",", 
      RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
    RowBox[{
     StyleBox["-",
      FontColor->RGBColor[1, 0, 0]], 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"s", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"s", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}]}], "}"}]]],
 " "
}], "Text"],

Cell["\<\
seemed to flip that curve right over the line running in the direction of\
\>", "Text"],

Cell[TextData[{
 "                ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"Cos", "[", 
     FractionBox["s", "2"], "]"}], ",", 
    RowBox[{"Sin", "[", 
     FractionBox["s", "2"], "]"}]}], "}"}]]],
 "."
}], "Text"],

Cell["\<\
Explain why this happens for any left hand perpendicular frame \
\>", "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "             ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "s", "]"}], ",", 
      RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
    RowBox[{
     StyleBox["-",
      FontColor->RGBColor[1, 0, 0]], 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"s", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"s", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}]}], "}"}]]],
 "."
}], "Text"],

Cell["Answer:", "Subsubsection"],

Cell[TextData[{
 StyleBox["Here's the hanger matrix corresponding to a cleared ",
  FontVariations->{"CompatibilityType"->0}],
 StyleBox["left hand",
  FontVariations->{"CompatibilityType"->0},
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" perpendicular frame.",
  FontVariations->{"CompatibilityType"->0}]
}], "SmallText"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"leftperpframe", ",", "s"}], "]"}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftperpframe", "[", "1", "]"}], ",", 
       RowBox[{"leftperpframe", "[", "2", "]"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["{",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox["-",
        FontColor->RGBColor[1, 0, 0]], 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]]}]}], 
     StyleBox["}",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"lefthanger", " ", "=", " ", 
    RowBox[{"Transpose", "[", 
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"leftperpframe", "[", "1", "]"}], ",", 
        RowBox[{"leftperpframe", "[", "2", "]"}]}], "}"}],
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "lefthanger", "]"}]}], "Input"],

Cell[TextData[{
 "Go with a cleared ",
 StyleBox["right hand",
  FontColor->RGBColor[0, 0, 1]],
 " perpendicular frame based on a cleared angle",
 StyleBox[" t:",
  FontColor->RGBColor[0, 0, 1]]
}], "Text"],

Cell[CellGroupData[{

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"rightperpframe", ",", "t"}], "]"}], ";"}], " "}],
  FontColor->GrayLevel[0]], "\[IndentingNewLine]", 
 StyleBox[
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"rightperpframe", "[", "1", "]"}], ",", 
     RowBox[{"rightperpframe", "[", "2", "]"}]}], "}"}], "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "t", "]"}], ",", 
       RowBox[{"Sin", "[", "t", "]"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", 
        RowBox[{"t", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}], ",", 
       RowBox[{"Sin", "[", 
        RowBox[{"t", "+", 
         FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], "}"}]}],
  FontColor->RGBColor[0, 0, 1]]}], "Input"],

Cell[TextData[{
 "Make the matrix that flips everything over the line through {0,0} defined \
by\n             ",
 StyleBox[" rightperpframe[1]= {Cos[t],Sin[t]}:",
  FontColor->RGBColor[0, 0, 1]]
}], "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "alignerframe", "]"}], ";"}], " "}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", "1", "]"}], ",", 
       RowBox[{"alignerframe", "[", "2", "]"}]}], "}"}], "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"rightperpframe", "[", "1", "]"}], ",", 
       RowBox[{"rightperpframe", "[", "2", "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"aligner", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"alignerframe", "[", "1", "]"}], ",", 
       RowBox[{"alignerframe", "[", "2", "]"}]}], "}"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", "hangerframe", "]"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"hangerframe", "[", "1", "]"}], ",", 
       RowBox[{"hangerframe", "[", "2", "]"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["{",
      FontColor->RGBColor[1, 0, 0]], 
     RowBox[{
      StyleBox[
       RowBox[{"rightperpframe", "[", "1", "]"}],
       FontColor->RGBColor[1, 0, 0]], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[
       RowBox[{"-", 
        RowBox[{"rightperpframe", "[", "2", "]"}]}],
       FontColor->RGBColor[1, 0, 0]]}], 
     StyleBox["}",
      FontColor->RGBColor[1, 0, 0]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\n", 
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"hanger", "=", 
     RowBox[{"Transpose", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"hangerframe", "[", "1", "]"}], ",", 
        RowBox[{"hangerframe", "[", "2", "]"}]}], "}"}], "]"}]}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["flipper",
     FontColor->RGBColor[1, 0, 0]], " ", "=", " ", 
    RowBox[{"TrigReduce", "[", 
     RowBox[{"hanger", ".", "stretcher", ".", "aligner"}], "]"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{"MatrixForm", "[", "flipper", "]"}]}], "Input",
 AspectRatioFixed->True]
}, Closed]],

Cell["Look at:", "SmallText"],

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "lefthanger", "]"}]], "Input"],

Cell[TextData[{
 "At this point, it should become vivid that when you set\n               ",
 Cell[BoxData[
  RowBox[{"t", "=", 
   StyleBox[
    FractionBox["s", "2"],
    FontSize->18]}]]],
 ", \nthen the flipper matrix becomes the same as the lefthanger matrix:"
}], "Text"],

Cell[BoxData[
 RowBox[{
  RowBox[{"lefthanger", " ", "==", " ", 
   TagBox["flipper",
    MatrixForm[#]& ]}], "/.", 
  RowBox[{"t", "->", 
   FractionBox["s", "2"]}]}]], "Input"],

Cell["\<\
This signals that hanging on the left hand perpendicular frame\
\>", "SmallText"],

Cell[TextData[{
 "              ",
 Cell[BoxData[
  RowBox[{
   StyleBox["{",
    FontColor->RGBColor[0, 0, 1]], 
   RowBox[{
    RowBox[{
     StyleBox["{",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      RowBox[{
       StyleBox["Cos",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["[",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["s",
        FontColor->GrayLevel[0]], 
       StyleBox["]",
        FontColor->RGBColor[0, 0, 1]]}], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox["Sin",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["[",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox["s",
        FontColor->GrayLevel[0]], 
       StyleBox["]",
        FontColor->RGBColor[0, 0, 1]]}]}], 
     StyleBox["}",
      FontColor->RGBColor[0, 0, 1]]}], 
    StyleBox[",",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["-",
      FontColor->RGBColor[1, 0, 0]], 
     RowBox[{
      StyleBox["{",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       RowBox[{
        StyleBox["Cos",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox["[",
         FontColor->RGBColor[0, 0, 1]], 
        RowBox[{
         StyleBox["s",
          FontColor->GrayLevel[0]], 
         StyleBox["+",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[
          FractionBox["\[Pi]", "2"],
          FontColor->RGBColor[0, 0, 1]]}], 
        StyleBox["]",
         FontColor->RGBColor[0, 0, 1]]}], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       RowBox[{
        StyleBox["Sin",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox["[",
         FontColor->RGBColor[0, 0, 1]], 
        RowBox[{
         StyleBox["s",
          FontColor->GrayLevel[0]], 
         StyleBox["+",
          FontColor->RGBColor[0, 0, 1]], 
         StyleBox[
          FractionBox["\[Pi]", "2"],
          FontColor->RGBColor[0, 0, 1]]}], 
        StyleBox["]",
         FontColor->RGBColor[0, 0, 1]]}]}], 
      StyleBox["}",
       FontColor->RGBColor[0, 0, 1]]}]}]}], 
   StyleBox["}",
    FontColor->RGBColor[0, 0, 1]]}]]]
}], "SmallText"],

Cell["\<\
is the same as reflecting (flipping) over the line through {0,0} defined by\
\>", "SmallText"],

Cell[TextData[{
 "               ",
 StyleBox["{Cos[",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FractionBox["s", "2"]],
  FontSize->18],
 StyleBox["],Sin[",
  FontColor->RGBColor[0, 0, 1]],
 Cell[BoxData[
  FractionBox["s", "2"]],
  FontSize->18],
 StyleBox["]}.",
  FontColor->RGBColor[0, 0, 1]]
}], "SmallText"],

Cell["\<\
Wrap up: 
 A hanger based on a left hand perpendicular frame is a reflection matrix , \
pure and simple.\
\>", "SmallText"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
T.3.a.ii) Aligners corresponding to left hand perpendicular frames are not \
rotations;  they are pure flippers (reflection matrices)\
\>", "Subsubsection"],

Cell["\<\
Explain this:
The aligner matrix based on a left hand frame\
\>", "Text"],

Cell[TextData[{
 "         ",
 Cell[BoxData[
  RowBox[{
   StyleBox["{",
    FontColor->RGBColor[0, 0, 1]], 
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Cos", "[", "s", "]"}], ",", 
       RowBox[{"Sin", "[", "s", "]"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[",",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["-",
      FontColor->RGBColor[1, 0, 0]], 
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Cos", "[", 
         RowBox[{"s", "+", 
          FractionBox["\[Pi]", "2"]}], "]"}], ",", 
        RowBox[{"Sin", "[", 
         RowBox[{"s", "+", 
          FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}],
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox["}",
    FontColor->RGBColor[0, 0, 1]]}]]]
}], "Text"],

Cell[CellGroupData[{

Cell["is a reflection matrix", "Text"],

Cell["Answer:", "Subsubsection"],

Cell[TextData[{
 "Here's the aligner matrix based on the ",
 StyleBox["left hand",
  FontColor->RGBColor[0, 0, 1]],
 " perpendicular frame."
}], "SmallText"],

Cell[BoxData[{
 StyleBox[
  RowBox[{
   RowBox[{
    RowBox[{"Clear", "[", 
     RowBox[{"leftperpframe", ",", "s"}], "]"}], ";"}], " "}],
  FontColor->RGBColor[0, 0, 1]], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftperpframe", "[", "1", "]"}], ",", 
       RowBox[{"leftperpframe", "[", "2", "]"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["{",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox["-",
        FontColor->RGBColor[1, 0, 0]], 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]]}]}], 
     StyleBox["}",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"leftaligner", " ", "=", 
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"leftperpframe", "[", "1", "]"}], ",", 
       RowBox[{"leftperpframe", "[", "2", "]"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "leftaligner", "]"}]}], "Input"],

Cell[TextData[{
 "And here's the hanger matrix based on the same ",
 StyleBox["left hand",
  FontColor->RGBColor[0, 0, 1]],
 " perpendicular frame."
}], "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"lefthanger", " ", "=", " ", 
    RowBox[{"Transpose", "[", 
     StyleBox[
      RowBox[{"{", 
       RowBox[{
        RowBox[{"leftperpframe", "[", "1", "]"}], ",", 
        RowBox[{"leftperpframe", "[", "2", "]"}]}], "}"}],
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "lefthanger", "]"}]}], "Input"],

Cell["\<\
They are the same.
Because you already know that the hanger matrix based on a left hand frame is \
a reflection matrix, you now know why an aligner based on a left hand frame \
is also a reflection matrix.\
\>", "SmallText"]
}, Closed]]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["\<\
T.4) Using left hand and right hand perpendicular frames to make matrices \
that preserve or reverse orientation \
\>", "Subsection",
 CellTags->"MGM.03.T4"],

Cell[CellGroupData[{

Cell[TextData[{
 "T.4.a.i) Using a left hand frame and a right hand frame to make a matrix \
that hits ",
 StyleBox["counter",
  FontColor->RGBColor[0, 0, 1]],
 "clockwise orientation into clockwise orientation"
}], "Subsubsection"],

Cell["\<\
Here's the unit circle shown with tangent vectors that indicate the direction \
of the parameterization\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "x", ",", "y", ",", "pointers", ",", " ", "hitplot", ",", "matrix", ",", 
     "t"}], "]"}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", 
      RowBox[{"2", " ", "\[Pi]"}]}], "}"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "t", "]"}], ",", 
      RowBox[{"Sin", "[", "t", "]"}]}], "}"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitplot", "[", "matrix_", "]"}], " ", ":=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"matrix", ".", 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "[", "t", "]"}], ",", 
          RowBox[{"y", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "->", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Orange"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tjump", " ", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "12"]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointers", "[", "matrix_", "]"}], " ", ":=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"VectorHead", "[", 
       RowBox[{
        RowBox[{"matrix", ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"matrix", ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "'"}], "[", "t", "]"}], ",", 
           RowBox[{
            RowBox[{"y", "'"}], "[", "t", "]"}]}], "}"}]}], " ", ",", " ", 
        "\n", "\t\t\t        ", 
        RowBox[{"HeadSize", "->", "0.2"}], ",", 
        RowBox[{"VectorColor", "->", "Black"}], ",", 
        RowBox[{"Aperture", "->", "0.4"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", " ", "tjump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"circleplot", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
    RowBox[{"pointers", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}]}], "]"}]}]}], "Input"],

Cell[TextData[{
 "The ",
 "parameterization",
 " is",
 StyleBox[" counterclockwise ",
  FontColor->RGBColor[0, 0, 1]],
 "in the sense that as t increases the points {x[t],y[t]} on the curve \
advance in the counterclockwise \nSee this happen:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"jump", " ", "=", 
    FractionBox["\[Pi]", "4"]}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{"circleplot", ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Red", ",", 
         RowBox[{"PointSize", "[", "0.05", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"y", "[", "t", "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"\"\<t =\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"N", "[", "t", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"0.7", ",", "0.9"}], "}"}]}], "]"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]"}], "-", "jump"}], ",", "jump"}], "}"}]}], 
   "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.50323343371318*^9, 3.503233443008401*^9}}],

Cell["Counterclockwise action.", "Text"],

Cell[TextData[{
 "Now make a matrix \n",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with a\n\[FilledVerySmallSquare] aligner based on a ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame,\n\[FilledVerySmallSquare] hanger based on a  ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame, and\n\[FilledVerySmallSquare] positive stretch \
factors:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", "0.3"}], ";"}], " "}], "\n", 
 RowBox[{
  StyleBox[
   RowBox[{
    RowBox[{"aligner", " ", "=", "  ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], "}"}]}], ";"}],
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xstretch", ",", "ystretch"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"2.3", ",", "1.6"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", " ", "=", " ", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"xstretch", "0"},
        {"0", "ystretch"}
       }], "\[NoBreak]", ")"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " ", "\n"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"t", " ", "=", " ", "0.5"}], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["hanger",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["Transpose",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["[",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["  ",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox["{",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", "t", "]"}], ",", 
          RowBox[{"Sin", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[
        RowBox[{"-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}],
        FontColor->RGBColor[1, 0, 0]]}], 
      StyleBox["}",
       FontColor->RGBColor[0, 0, 1]]}], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", " ", "=", " ", 
    RowBox[{
     StyleBox["hanger",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["stretcher",
      FontColor->RGBColor[1, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["aligner",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "A", "]"}]}], "Input"],

Cell["\<\
See what a hit with this matrix does to the circle and its parameterization:\
\>", "Text"],

Cell[BoxData[
 RowBox[{"hitcircleplot", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}]}], "]"}]}]], "Input"],

Cell["\<\
Clockwise.
See it happen:\
\>", "Text"],

Cell[BoxData[
 RowBox[{"ListAnimate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{"hitcircleplot", ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Green", ",", 
         RowBox[{"PointSize", "[", "0.05", "]"}], ",", 
         RowBox[{"Point", "[", 
          StyleBox[
           RowBox[{"A", ".", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x", "[", "t", "]"}], ",", 
              RowBox[{"y", "[", "t", "]"}]}], "}"}]}],
           FontColor->RGBColor[0, 0, 1]], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"\"\<t = \>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"N", "[", "t", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "]"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]"}], " ", "-", " ", "jump"}], ",", "jump"}], 
     "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.503233464379664*^9, 3.503233475240423*^9}}],

Cell["See both:", "Text"],

Cell[BoxData[
 RowBox[{"ListAnimate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{"circleplot", ",", "hitcircleplot", ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Green", ",", 
         RowBox[{"PointSize", "[", "0.05", "]"}], ",", 
         RowBox[{"Point", "[", 
          StyleBox[
           RowBox[{"A", ".", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"x", "[", "t", "]"}], ",", 
              RowBox[{"y", "[", "t", "]"}]}], "}"}]}],
           FontColor->RGBColor[0, 0, 1]], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Red", ",", 
         RowBox[{"PointSize", "[", "0.05", "]"}], ",", 
         RowBox[{"Point", "[", 
          StyleBox[
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}],
           FontColor->RGBColor[0, 0, 1]], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"\"\<t = \>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"N", "[", "t", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "]"}], ",", " ", 
      RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]"}], " ", "-", " ", "jump"}], ",", "jump"}], 
     "}"}]}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.503233487504198*^9, 3.5032334960091133`*^9}},
 AnimationDisplayTime->0.2],

Cell["\<\
After the hit, the parameterization is clockwise.
In other words, a hit with the matrix A reversed orientation from \
counterclockwise to clockwise.\
\>", "Text"],

Cell[TextData[{
 "See what happens for some  matrices ",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with\n\[FilledVerySmallSquare] aligner based on a random ",
 Cell[BoxData["right"]],
 " hand frame,\n\[FilledVerySmallSquare] hanger based on a random ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame, and\n\[FilledVerySmallSquare] random positive stretch \
factors:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", 
    RowBox[{"Random", "[", 
     RowBox[{"Real", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], ",", 
        FractionBox["\[Pi]", "2"]}], "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  StyleBox[
   RowBox[{
    RowBox[{"aligner", " ", "=", "  ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], "}"}]}], ";"}],
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xstretch", ",", "ystretch"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Random", "[", 
       RowBox[{"Real", ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "3"}], "}"}]}], "]"}], ",", " ", 
      RowBox[{"Random", "[", 
       RowBox[{"Real", ",", 
        RowBox[{"{", 
         RowBox[{"0.5", ",", "2.0"}], "}"}]}], "]"}]}], "}"}]}], ";"}], 
  " "}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", " ", "=", " ", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"xstretch", "0"},
        {"0", "ystretch"}
       }], "\[NoBreak]", ")"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", 
    RowBox[{"Random", "[", 
     RowBox[{"Real", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], ",", 
        FractionBox["\[Pi]", "2"]}], "}"}]}], "]"}]}], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["hanger",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["Transpose",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["[",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["  ",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox["{",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", "s", "]"}], ",", 
          RowBox[{"Sin", "[", "s", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[
        RowBox[{"-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"s", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"s", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}],
        FontColor->RGBColor[1, 0, 0]]}], 
      StyleBox["}",
       FontColor->RGBColor[0, 0, 1]]}], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", " ", "=", " ", 
    RowBox[{
     StyleBox["hanger",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["stretcher",
      FontColor->RGBColor[1, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["aligner",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\n", 
 RowBox[{
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}]}], "]"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{"\"\<A = \>\"", 
  RowBox[{"MatrixForm", "[", "A", "]"}]}]}], "Input"],

Cell[CellGroupData[{

Cell["\<\
Rerun many times noting that after each hit, the resulting parameterization \
is clockwise.
Explain why it had to turn out that way.\
\>", "Text"],

Cell["Answer:", "Special1"],

Cell[TextData[{
 "Go with a new matrix ",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with\n\[FilledVerySmallSquare] aligner based on a random right hand frame,\
\n\[FilledVerySmallSquare] hanger based on a random ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame, and\n\[FilledVerySmallSquare] positive stretch factors:"
}], "SmallText"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", 
    RowBox[{"Random", "[", 
     RowBox[{"Real", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], ",", 
        FractionBox["\[Pi]", "2"]}], "}"}]}], "]"}]}], ";"}], " "}], "\n", 
 RowBox[{
  StyleBox[
   RowBox[{
    RowBox[{"aligner", " ", "=", "  ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], "}"}]}], ";"}],
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xstretch", ",", "ystretch"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"2.3", ",", "1.5"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", " ", "=", " ", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"xstretch", "0"},
        {"0", "ystretch"}
       }], "\[NoBreak]", ")"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"t", "=", " ", 
    RowBox[{"Random", "[", 
     RowBox[{"Real", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", 
         FractionBox["\[Pi]", "2"]}], ",", 
        FractionBox["\[Pi]", "2"]}], "}"}]}], "]"}]}], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["hanger",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["Transpose",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["[",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["  ",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox["{",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", "t", "]"}], ",", 
          RowBox[{"Sin", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[
        RowBox[{"-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}],
        FontColor->RGBColor[1, 0, 0]]}], 
      StyleBox["}",
       FontColor->RGBColor[0, 0, 1]]}], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", " ", "=", " ", 
    RowBox[{
     StyleBox["hanger",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["stretcher",
      FontColor->RGBColor[1, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["aligner",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "A", "]"}]}], "Input"],

Cell[TextData[{
 "Here's what the hit with the ",
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " does:"
}], "SmallText"],

Cell[BoxData[
 RowBox[{"afteralignerhit", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox["aligner",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox["aligner",
      FontColor->RGBColor[0, 0, 1]], "]"}]}], "]"}]}]], "Input"],

Cell["\<\
Still counterclockwise. 
Reason: The aligner is based on a right hand frame and is therefore a \
rotation matrix. 
Hits with rotation matrices cannot switch the direction of the \
parameterization.\
\>", "SmallText"],

Cell[TextData[{
 "Here's what the hit with the ",
 StyleBox["stretcher",
  FontColor->RGBColor[1, 0, 1]],
 ".",
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " does:"
}], "SmallText"],

Cell[BoxData[
 RowBox[{"afterstretcheralignerhit", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     RowBox[{
      StyleBox["stretcher",
       FontColor->RGBColor[1, 0, 1]], 
      StyleBox[".",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["aligner",
       FontColor->RGBColor[0, 0, 1]]}], "]"}], ",", 
    RowBox[{"pointers", "[", 
     RowBox[{
      StyleBox["stretcher",
       FontColor->RGBColor[1, 0, 1]], 
      StyleBox[".",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["aligner",
       FontColor->RGBColor[0, 0, 1]]}], "]"}]}], "]"}]}]], "Input"],

Cell["\<\
Still counterclockwise. 
Reason: 
Hits with stretcher matrices (coming from positive stretch factors)  cannot \
switch the direction of the parameterization.\
\>", "SmallText"],

Cell[TextData[{
 "Here's what the hit with the ",
 StyleBox["A = hanger",
  FontColor->RGBColor[0, 0, 1]],
 ".",
 StyleBox["stretcher",
  FontColor->RGBColor[1, 0, 1]],
 ".",
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " does:"
}], "SmallText"],

Cell[BoxData[
 RowBox[{"afterhangerstretcheralignerhit", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     RowBox[{
      StyleBox["hanger",
       FontColor->RGBColor[0, 0, 1]], ".", 
      StyleBox["stretcher",
       FontColor->RGBColor[1, 0, 1]], 
      StyleBox[".",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["aligner",
       FontColor->RGBColor[0, 0, 1]]}], "]"}], ",", 
    RowBox[{"pointers", "[", 
     RowBox[{
      StyleBox["hanger",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[".",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["stretcher",
       FontColor->RGBColor[1, 0, 1]], 
      StyleBox[".",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox["aligner",
       FontColor->RGBColor[0, 0, 1]]}], "]"}]}], "]"}]}]], "Input"],

Cell[TextData[{
 "Now the ",
 "parameterization",
 " is clockwise.\nReason: The hanger is based on a",
 StyleBox[" left",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame and is therefore a",
 StyleBox[" reflection (flipper)",
  FontColor->RGBColor[0, 0, 1]],
 " matrix that flips about some line through {0,0}.. \nHits with reflection \
(flipper) matrices always switch the direction of the parameterization.\n\n\
For exactly these reasons, hits with any matrix \n      ",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " \nmade with\n\[FilledVerySmallSquare] aligner based on a random right hand \
frame,\n\[FilledVerySmallSquare] hanger based on a random ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame, and\n\[FilledVerySmallSquare] positive stretch factors\n\
reverse orientation from counterclockwise to clockwise.\n"
}], "SmallText"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "T.4.a.ii) Using two right hand frames to make a matrix that hits ",
 StyleBox["counter",
  FontColor->RGBColor[0, 0, 1]],
 "clockwise orientation into ",
 StyleBox["counter",
  FontColor->RGBColor[0, 0, 1]],
 "clockwise orientation"
}], "Subsubsection"],

Cell["\<\
Here's the unit circle shown with tangent vectors that indicate the direction \
of the parameterization\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "x", ",", "y", ",", "pointers", ",", " ", "hitplot", ",", "matrix", ",", 
     "t"}], "]"}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", 
      RowBox[{"2", " ", "\[Pi]"}]}], "}"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "t", "]"}], ",", 
      RowBox[{"Sin", "[", "t", "]"}]}], "}"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitplot", "[", "matrix_", "]"}], " ", ":=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"matrix", ".", 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "[", "t", "]"}], ",", 
          RowBox[{"y", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "->", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Orange"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tjump", " ", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "12"]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointers", "[", "matrix_", "]"}], " ", ":=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"VectorHead", "[", 
       RowBox[{
        RowBox[{"matrix", ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"matrix", ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "'"}], "[", "t", "]"}], ",", 
           RowBox[{
            RowBox[{"y", "'"}], "[", "t", "]"}]}], "}"}]}], " ", ",", " ", 
        "\n", "\t\t\t        ", 
        RowBox[{"HeadSize", "->", "0.2"}], ",", 
        RowBox[{"VectorColor", "->", "Black"}], ",", 
        RowBox[{"Aperture", "->", "0.4"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", " ", "tjump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"circleplot", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
    RowBox[{"pointers", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}]}], "]"}]}]}], "Input"],

Cell[TextData[{
 "The parameterization is",
 StyleBox[" counterclockwise ",
  FontColor->RGBColor[0, 0, 1]],
 "in the sense that as ",
 Cell[BoxData["t"]],
 " increases the points {x[t],y[t]} on the curve advance in the \
counterclockwise direction.\n"
}], "Text"],

Cell[TextData[{
 "Now make a matrix \n",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with a\n\[FilledVerySmallSquare] aligner based on a ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame,\n\[FilledVerySmallSquare] hanger based on a  ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame, and\n\[FilledVerySmallSquare] positive stretch \
factors:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", "0.3"}], ";"}], " "}], "\n", 
 RowBox[{
  StyleBox[
   RowBox[{
    RowBox[{"aligner", " ", "=", "  ", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], "}"}]}], ";"}],
   FontColor->RGBColor[0, 0, 1]], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"xstretch", ",", "ystretch"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"2.3", ",", "1.6"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   StyleBox[
    RowBox[{"stretcher", " ", "=", " ", 
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"xstretch", "0"},
        {"0", "ystretch"}
       }], "\[NoBreak]", ")"}]}],
    FontColor->RGBColor[1, 0, 1]], ";"}], " ", "\n"}], "\[IndentingNewLine]", 

 RowBox[{
  RowBox[{
   RowBox[{"t", " ", "=", " ", "0.5"}], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox["hanger",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["Transpose",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["[",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["  ",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox["{",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", "t", "]"}], ",", 
          RowBox[{"Sin", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"t", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"t", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}],
        FontColor->RGBColor[1, 0, 0]]}], 
      StyleBox["}",
       FontColor->RGBColor[0, 0, 1]]}], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", " ", "=", " ", 
    RowBox[{
     StyleBox["hanger",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["stretcher",
      FontColor->RGBColor[1, 0, 1]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["aligner",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "A", "]"}]}], "Input"],

Cell["\<\
See what a hit with this matrix does to the circle and its parameterization:\
\>", "Text"],

Cell[BoxData[
 RowBox[{"hitcircleplot", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}]}], "]"}]}]], "Input"],

Cell["Still counterclockwise.", "Text"],

Cell["See both:", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"jump", "=", 
    FractionBox["\[Pi]", "4"]}], ";"}], " "}], "\n", 
 RowBox[{"ListAnimate", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"Show", "[", 
     RowBox[{"circleplot", ",", "hitcircleplot", ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Green", ",", 
         RowBox[{"PointSize", "[", "0.05", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"A", ".", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"x", "[", "t", "]"}], ",", 
             RowBox[{"y", "[", "t", "]"}]}], "}"}]}], "]"}]}], "}"}], "]"}], 
      ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"{", 
        RowBox[{"Red", ",", 
         RowBox[{"PointSize", "[", "0.05", "]"}], ",", 
         RowBox[{"Point", "[", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"y", "[", "t", "]"}]}], "}"}], "]"}]}], "}"}], "]"}], ",", 
      RowBox[{"Graphics", "[", 
       RowBox[{"Text", "[", 
        RowBox[{
         RowBox[{"\"\<t =\>\"", "<>", 
          RowBox[{"ToString", "[", 
           RowBox[{"N", "[", "t", "]"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "]"}], ",", " ", 
      RowBox[{"PlotRange", " ", "->", " ", "All"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"t", ",", "0", ",", 
      RowBox[{
       RowBox[{"2", " ", "\[Pi]"}], "-", "jump"}], ",", "jump"}], "}"}]}], 
   "]"}], "]"}]}], "Input",
 CellChangeTimes->{{3.503233520276173*^9, 3.503233529337152*^9}},
 AnimationDisplayTime->0.2],

Cell[TextData[{
 "After the hit, the ",
 "parameterization",
 " is still  ",
 StyleBox["counter",
  FontColor->RGBColor[0, 0, 1]],
 "clockwise.\nIn other words, a hit with the matrix A did not reverse \
orientation from counterclockwise to clockwise."
}], "Text"],

Cell[CellGroupData[{

Cell[TextData[{
 "Explain why the same thing will happen for any  matrices \n           ",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with\n\[FilledVerySmallSquare] aligner based on any ",
 Cell[BoxData["right"]],
 " hand frame,\n\[FilledVerySmallSquare] hanger based on any ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame, and\n\[FilledVerySmallSquare] any positive stretch factors."
}], "Text"],

Cell["Answer:", "Special1"],

Cell[TextData[{
 "Go with a  matrix ",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with\n\[FilledVerySmallSquare] aligner based on a random right hand frame,\
\n\[FilledVerySmallSquare] hanger based on a random ",
 StyleBox["right ",
  FontColor->RGBColor[0, 0, 1]],
 "hand frame, and\n\[FilledVerySmallSquare] positive stretch factors:"
}], "SmallText"],

Cell[TextData[{
 "Because aligner is based on a right hand frame,the hit with aligner is a \
rotation. So the hit with aligner does  not reverse orientation from \
counterclockwise to clockwise.\nStretcher matrices never reverse orientation \
from counterclockwise to clockwise.\nBecause hanger is based on a right hand \
frame,the hit with hanger is a rotation. So the hit with hanger does  not \
reverse orientation from counterclockwise to clockwise.\nThe upshot:\nNone of \
the hits with aligner, stretcher or hanger reverse orientation from \
counterclockwise to clockwise.\nSo a hit with ",
 StyleBox["A= hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner ",
  FontColor->RGBColor[0, 0, 1]],
 " cannot reverse orientation from counterclockwise to clockwise."
}], "SmallText"]
}, Closed]]
}, Closed]],

Cell[CellGroupData[{

Cell["T.4.a.iii) Counting the flips", "Subsubsection"],

Cell["\<\
Here's the unit circle shown with tangent vectors that indicate the direction \
of the parameterization\
\>", "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Clear", "[", 
    RowBox[{
    "x", ",", "y", ",", "pointers", ",", " ", "hitplot", ",", "matrix", ",", 
     "t"}], "]"}], ";"}], " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tlow", ",", "thigh"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"0", ",", " ", 
      RowBox[{"2", " ", "\[Pi]"}]}], "}"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"x", "[", "t_", "]"}], ",", 
      RowBox[{"y", "[", "t_", "]"}]}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Cos", "[", "t", "]"}], ",", 
      RowBox[{"Sin", "[", "t", "]"}]}], "}"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"hitplot", "[", "matrix_", "]"}], " ", ":=", 
    RowBox[{"ParametricPlot", "[", 
     RowBox[{
      RowBox[{"matrix", ".", 
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"x", "[", "t", "]"}], ",", 
          RowBox[{"y", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh"}], "}"}], ",", 
      RowBox[{"PlotStyle", "->", 
       RowBox[{"{", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Thickness", "[", "0.01", "]"}], ",", "Orange"}], "}"}], 
        "}"}]}], ",", 
      RowBox[{"AxesLabel", "->", 
       RowBox[{"{", 
        RowBox[{"\"\<x\>\"", ",", "\"\<y\>\""}], "}"}]}]}], "]"}]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"tjump", " ", "=", 
    FractionBox[
     RowBox[{"thigh", "-", "tlow"}], "12"]}], ";"}], 
  " "}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"pointers", "[", "matrix_", "]"}], " ", ":=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"VectorHead", "[", 
       RowBox[{
        RowBox[{"matrix", ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"y", "[", "t", "]"}]}], "}"}]}], ",", 
        RowBox[{"matrix", ".", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"x", "'"}], "[", "t", "]"}], ",", 
           RowBox[{
            RowBox[{"y", "'"}], "[", "t", "]"}]}], "}"}]}], " ", ",", " ", 
        "\n", "\t\t\t        ", 
        RowBox[{"HeadSize", "->", "0.2"}], ",", 
        RowBox[{"VectorColor", "->", "Black"}], ",", 
        RowBox[{"Aperture", "->", "0.4"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "tlow", ",", "thigh", ",", " ", "tjump"}], "}"}]}], 
     "]"}]}], ";"}], " ", "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"circleplot", " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}], ",", 
    RowBox[{"pointers", "[", 
     RowBox[{"IdentityMatrix", "[", "2", "]"}], "]"}]}], "]"}]}]}], "Input"],

Cell[TextData[{
 StyleBox[" Counterclockwise.",
  FontColor->RGBColor[0, 0, 1]],
 "\n"
}], "Text"],

Cell[TextData[{
 "Now make a matrix \n       ",
 StyleBox["A = hanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".stretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with a\n\[FilledVerySmallSquare] aligner based on a ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame,\n\[FilledVerySmallSquare] hanger based on a  ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand perpendicular frame, and\n\[FilledVerySmallSquare] positive stretch \
factors:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", "0.3"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"A", 
      StyleBox["aligner",
       FontColor->RGBColor[0, 0, 1]]}]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["  ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}], ",", 
         RowBox[{"Sin", "[", 
          RowBox[{"s", "+", 
           FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}], "}"}],
     FontColor->RGBColor[0, 0, 1]]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Axstretch", ",", "Aystretch"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"2.3", ",", "1.6"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"A", 
      StyleBox["stretcher",
       FontColor->RGBColor[1, 0, 1]]}]], 
    StyleBox[" ",
     FontColor->RGBColor[1, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[1, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[1, 0, 1]], 
    StyleBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"Axstretch", "0"},
        {"0", "Aystretch"}
       }], "\[NoBreak]", ")"}],
     FontColor->RGBColor[1, 0, 1]]}], ";"}], " ", 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"t", " ", "=", " ", "0.5"}], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"A", 
      StyleBox["hanger",
       FontColor->RGBColor[0, 0, 1]]}]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["Transpose",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["[",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox["  ",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox["{",
       FontColor->RGBColor[0, 0, 1]], 
      RowBox[{
       StyleBox[
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", "t", "]"}], ",", 
          RowBox[{"Sin", "[", "t", "]"}]}], "}"}],
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[",",
        FontColor->RGBColor[0, 0, 1]], 
       StyleBox[
        RowBox[{"-", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}],
        FontColor->RGBColor[1, 0, 0]]}], 
      StyleBox["}",
       FontColor->RGBColor[0, 0, 1]]}], 
     StyleBox["]",
      FontColor->RGBColor[0, 0, 1]]}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"A", " ", "=", " ", 
    RowBox[{
     StyleBox[
      RowBox[{"A", 
       StyleBox["hanger",
        FontColor->RGBColor[0, 0, 1]]}]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[
      RowBox[{"A", 
       StyleBox["stretcher",
        FontColor->RGBColor[1, 0, 1]]}]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[
      RowBox[{"A", 
       StyleBox["aligner",
        FontColor->RGBColor[0, 0, 1]]}]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "A", "]"}]}], "Input"],

Cell[TextData[{
 "Because the hanger for A is based on a ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame and the aligner for A is based on a ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame, a hit with A on the counterclockwise unit circle above \
produces a clockwise parameterization:"
}], "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{
    StyleBox["A",
     FontColor->RGBColor[0, 0, 1]], "hitcircleplot"}]], " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox["A",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"PlotLabel", "->", "\"\<Hit with A\>\""}]}], "]"}]}]], "Input"],

Cell["Clockwise.", "Text"],

Cell[TextData[{
 "Now make a matrix \n      B",
 StyleBox[" = Bhanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".Bstretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["B",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["aligner",
  FontColor->RGBColor[0, 0, 1]],
 " with a\n\[FilledVerySmallSquare] aligner based on a ",
 StyleBox["left",
  FontColor->RGBColor[1, 0, 0]],
 " hand perpendicular frame,\n\[FilledVerySmallSquare] hanger based on a \
right hand perpendicular frame, and\n\[FilledVerySmallSquare] positive \
stretch factors:"
}], "Text"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"s", " ", "=", " ", "0.4"}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"B", 
      StyleBox["aligner",
       FontColor->RGBColor[0, 0, 1]]}]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["  ",
     FontColor->RGBColor[0, 0, 1]], 
    RowBox[{
     StyleBox["{",
      FontColor->RGBColor[0, 0, 1]], 
     RowBox[{
      StyleBox[
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Cos", "[", "s", "]"}], ",", 
         RowBox[{"Sin", "[", "s", "]"}]}], "}"}],
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[",",
       FontColor->RGBColor[0, 0, 1]], 
      StyleBox[
       RowBox[{"-", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Cos", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}], ",", 
          RowBox[{"Sin", "[", 
           RowBox[{"s", "+", 
            FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}]}],
       FontColor->RGBColor[1, 0, 0]]}], 
     StyleBox["}",
      FontColor->RGBColor[0, 0, 1]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Bxstretch", ",", "Bystretch"}], "}"}], " ", "=", " ", 
    RowBox[{"{", 
     RowBox[{"1.7", ",", "1.0"}], "}"}]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"B", 
      StyleBox["stretcher",
       FontColor->RGBColor[1, 0, 1]]}]], 
    StyleBox[" ",
     FontColor->RGBColor[1, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[1, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[1, 0, 1]], 
    StyleBox[
     RowBox[{"(", "\[NoBreak]", GridBox[{
        {"Bxstretch", "0"},
        {"0", "Bystretch"}
       }], "\[NoBreak]", ")"}],
     FontColor->RGBColor[1, 0, 1]]}], ";"}], " ", 
  "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"t", " ", "=", " ", 
    RowBox[{"-", "0.5"}]}], ";"}], "  "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    StyleBox[
     RowBox[{"B", 
      StyleBox["hanger",
       FontColor->RGBColor[0, 0, 1]]}]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox["=",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[" ",
     FontColor->RGBColor[0, 0, 1]], 
    StyleBox[
     RowBox[{"Transpose", "[", "  ", 
      RowBox[{"{", 
       RowBox[{
        StyleBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", "t", "]"}], ",", 
           RowBox[{"Sin", "[", "t", "]"}]}], "}"}],
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[",",
         FontColor->RGBColor[0, 0, 1]], 
        StyleBox[
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Cos", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}], ",", 
           RowBox[{"Sin", "[", 
            RowBox[{"t", "+", 
             FractionBox["\[Pi]", "2"]}], "]"}]}], "}"}],
         FontColor->RGBColor[1, 0, 0]]}], "}"}], "]"}],
     FontColor->RGBColor[0, 0, 1]]}], ";"}], " "}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"B", " ", "=", " ", 
    RowBox[{
     StyleBox[
      RowBox[{"B", 
       StyleBox["hanger",
        FontColor->RGBColor[0, 0, 1]]}]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[
      RowBox[{"B", 
       StyleBox["stretcher",
        FontColor->RGBColor[1, 0, 1]]}]], 
     StyleBox[".",
      FontColor->RGBColor[0, 0, 1]], 
     StyleBox[
      RowBox[{"B", 
       StyleBox["aligner",
        FontColor->RGBColor[0, 0, 1]]}]]}]}], 
   StyleBox[";",
    FontColor->RGBColor[0, 0, 1]]}], 
  StyleBox[" ",
   FontColor->RGBColor[0, 0, 1]]}], "\[IndentingNewLine]", 
 RowBox[{"MatrixForm", "[", "B", "]"}]}], "Input"],

Cell[TextData[{
 "Because the hanger for B is based on a ",
 StyleBox["right",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame and the aligner for B is based on a ",
 StyleBox["left",
  FontColor->RGBColor[0, 0, 1]],
 " hand frame, a hit with B on the counterclockwise unit circle above \
produces a clockwise parameterization:"
}], "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{
    StyleBox["B",
     FontColor->RGBColor[0, 0, 1]], "hitcircleplot"}]], " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox["B",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox["B",
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"PlotLabel", "->", "\"\<Hit with \!\(\*
StyleBox[\"B\",
Background->None]\)\>\""}]}], "]"}]}]], "Input"],

Cell["\<\
Clockwise.
Now see what happens when you hit the same unit circle with A.B:\
\>", "Text"],

Cell[BoxData[
 RowBox[{
  StyleBox[
   RowBox[{
    StyleBox["AB",
     FontColor->RGBColor[0, 0, 1]], "hitcircleplot"}]], " ", "=", 
  RowBox[{"Show", "[", 
   RowBox[{
    RowBox[{"hitplot", "[", 
     StyleBox[
      RowBox[{"A", ".", "B"}],
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"pointers", "[", 
     StyleBox[
      RowBox[{"A", ".", "B"}],
      FontColor->RGBColor[0, 0, 1]], "]"}], ",", 
    RowBox[{"PlotLabel", "->", "\"\<Hit with A.B\>\""}]}], "]"}]}]], "Input"],

Cell[CellGroupData[{

Cell["\<\
Counterclockwise.
Explain how you could have predicted this in advance.\
\>", "Text"],

Cell["Answer:", "Special1"],

Cell[TextData[{
 "A hit with ",
 StyleBox["B",
  FontColor->RGBColor[0, 0, 1]],
 " reverses orientation from counterclockwise to clockwise.. And a further \
hit with ",
 StyleBox["A",
  FontColor->RGBColor[0, 0, 1]],
 " reverses orientation again - this time from clockwise to counterclockwise. \
\nConsequently the hit with ",
 StyleBox["A.B",
  FontColor->RGBColor[0, 0, 1]],
 " does not reverse orientation at all.\n"
}], "SmallText"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["If you feel you want a more detailed explanation, \
click on the right.",
 FontVariations->{"CompatibilityType"->0}]], "Special2",
 TextAlignment->Center,
 TextJustification->0],

Cell[TextData[{
 "        ",
 StyleBox["A = ",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox["Ahanger",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[".Astretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["Aaligner\n        B = ",
  FontColor->RGBColor[0, 0, 1]],
 " ",
 StyleBox["Bhanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".Bstretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["Baligner",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox["\n        A. B = ",
  FontColor->RGBColor[0, 0, 1]],
 " ",
 StyleBox["Ahanger",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[".Astretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["Aaligner",
  FontColor->RGBColor[0, 0, 1]],
 ".",
 StyleBox["Bhanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".Bstretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["Baligner",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" \n        ",
  FontColor->RGBColor[0, 0, 1]]
}], "SmallText"],

Cell[TextData[{
 "\[FilledVerySmallSquare] Hits with the ",
 StyleBox["Aaligner",
  FontColor->RGBColor[0, 0, 1]],
 " and the ",
 StyleBox["Bhanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[" do not ",
  FontWeight->"Bold"],
 "reverse orientation."
}], "SmallText"],

Cell["\<\
Reason: Both are based on right hand perpendicular frames, so they are \
rotation matrices. 
Hits with rotation matrices do not reverse orientation.\
\>", "Special2",
 TextAlignment->Center,
 TextJustification->0],

Cell[TextData[{
 "\[FilledVerySmallSquare] Hits with the ",
 StyleBox["Astretcher",
  FontColor->RGBColor[1, 0, 1]],
 " and the ",
 StyleBox["Bstretcher",
  FontColor->RGBColor[1, 0, 1]],
 " ",
 StyleBox["do not ",
  FontWeight->"Bold"],
 " reverse orientation."
}], "SmallText"],

Cell["Reason: Stretches out the axes cannot reverse orientation.", "Special2",
 TextAlignment->Center,
 TextJustification->0],

Cell[TextData[{
 "\[FilledVerySmallSquare] Hits with the ",
 StyleBox["Ahanger",
  FontColor->RGBColor[1, 0, 0]],
 " and the ",
 StyleBox["Baligner",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" do  ",
  FontWeight->"Bold"],
 "reverse orientation."
}], "SmallText"],

Cell["\<\
Reason: Both are based on left hand perpendicular frames, so they are flipper \
matrices. 
Hits with flipper matrices always reverse orientation.\
\>", "Special2",
 TextAlignment->Center,
 TextJustification->0],

Cell[TextData[{
 "So with regard to orientation switches, you can analyze hits with ",
 StyleBox["\n           A. B  = ",
  FontColor->RGBColor[0, 0, 1]],
 " ",
 StyleBox["Ahanger",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[".Astretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["Aaligner",
  FontColor->RGBColor[0, 0, 1]],
 ".",
 StyleBox["Bhanger",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".Bstretcher.",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["Baligner",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" ",
  FontColor->RGBColor[0, 0, 1]]
}], "SmallText"],

Cell[TextData[{
 "in these terms:\n",
 StyleBox[" ",
  FontColor->RGBColor[0, 0, 1]],
 " ",
 StyleBox["(Orientation reverse)",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[".(No reverse).",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["(No reverse",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[")",
  FontColor->RGBColor[0, 0, 1]],
 ".",
 StyleBox["(No reverse).",
  FontColor->RGBColor[0, 0, 1]],
 StyleBox[".(No reverse).",
  FontColor->RGBColor[1, 0, 1]],
 StyleBox["(Orientation reverse)",
  FontColor->RGBColor[1, 0, 0]],
 StyleBox[" .",
  FontColor->RGBColor[0, 0, 1]]
}], "SmallText"],

Cell["\<\
The first orientation reverse on the far right changes counterclockwise to \
clockwise. The second orientation reverse (on the far left) changes clockwise \
back to counterclockwise.

The upshot:
Hits with A.B hit counterclockwise into counterclockwise.\
\>", "SmallText"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
},
AutoGeneratedPackage->None,
WindowToolbars->{},
CellGrouping->Manual,
WindowSize->{632, 433},
WindowMargins->{{4, Automatic}, {Automatic, 1}},
PrivateNotebookOptions->{"ColorPalette"->{RGBColor, 128}},
ShowCellLabel->True,
ShowCellTags->False,
RenderingOptions->{"ObjectDithering"->True,
"RasterDithering"->False},
FrontEndVersion->"8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 6, \
2010)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell["Style Definitions", "Subtitle"], 
      Cell[
      "The following notebook is copyright 2010 by Make: Mathematics.and may \
not be reproduced, copied, or distributed, in whole or in part, through any \
means electronic or otherwise, without written consent of the copyright \
holder.", "Text"], 
      Cell[
       CellGroupData[{
         Cell["Style Environment Names", "Section"], 
         Cell[
          StyleData[All, "Working"], ScriptMinSize -> 9], 
         Cell[
          StyleData[All, "Printout"], PageWidth -> PaperWidth, 
          PrivateFontOptions -> {"FontType" -> "Outline"}], 
         Cell[
          StyleData[All, "TwoColumn"], PageWidth -> PaperWidth, 
          PrivateFontOptions -> {"FontType" -> "Outline"}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Notebook Options", "Section"], 
         Cell[
         "The options defined for the style below will be used at the \
Notebook level.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Notebook"], CellGrouping -> Manual, 
             PrintingOptions -> {
              "FirstPageFooter" -> False, "FirstPageHeader" -> False, 
               "RestPagesFooter" -> False, "RestPagesHeader" -> False}, 
             ShowClosedCellArea -> True, StyleMenuListing -> None, Background -> 
             RGBColor[1, 0.940002, 0.900008]], 
            Cell[
             StyleData["Notebook", "Printout"], Background -> GrayLevel[1]], 
            Cell[
             StyleData["Notebook", "TwoColumn"], 
             PageHeaders -> {{None, None, None}, {None, None, None}}, 
             PageHeaderLines -> {False, False}, 
             PrintingOptions -> {"PrintingMargins" -> {{55, 25}, {40, 45}}}, 
             Background -> GrayLevel[1]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Headings", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Title"], CellFrame -> {{1, 1}, {1, 5}}, 
             ShowCellBracket -> False, CellMargins -> {{24, 24}, {12, 5}}, 
             CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> 
             False, CellFrameMargins -> {{15, Inherited}, {
               Inherited, Inherited}}, DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, 
             LineSpacing -> {1.1, 1}, 
             CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
               "Figure", 0}}, FontFamily -> "Times", FontSize -> 24, 
             FontWeight -> "Bold", FontColor -> GrayLevel[0], Background -> 
             RGBColor[0.925002, 0.854978, 0.774975]], 
            Cell[
             StyleData["Title", "Printout"], 
             CellMargins -> {{0, Inherited}, {0, 0}}, TextAlignment -> Center,
              FontSize -> 16, FontColor -> GrayLevel[0], Background -> 
             GrayLevel[1]], 
            Cell[
             StyleData["Title", "TwoColumn"], CellFrame -> {{1, 1}, {5, 0}}, 
             CellMargins -> {{0, Inherited}, {0, 0}}, TextAlignment -> Center,
              FontSize -> 16, FontColor -> GrayLevel[0], Background -> 
             GrayLevel[1]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subtitle"], ShowCellBracket -> False, 
             ShowClosedCellArea -> True, 
             CellMargins -> {{6, Inherited}, {0, 0}}, 
             CellGroupingRules -> {"TitleGrouping", 10}, PageBreakBelow -> 
             False, DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             TextAlignment -> Left, FontFamily -> "Times", FontSize -> 14], 
            Cell[
             StyleData["Subtitle", "Printout"], 
             CellMargins -> {{14, Inherited}, {2, 2}}], 
            Cell[
             StyleData["Subtitle", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {2, 2}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubtitle"], CellFrame -> True, ShowClosedCellArea -> 
             True, CellMargins -> {{6, Inherited}, {6, Inherited}}, 
             CellGroupingRules -> {"TitleGrouping", 20}, PageBreakBelow -> 
             False, DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             TextAlignment -> Center, FontFamily -> "Times", FontSize -> 24, 
             FontColor -> RGBColor[1, 0, 0]], 
            Cell[
             StyleData["Subsubtitle", "Printout"], 
             CellMargins -> {{14, Inherited}, {2, 2}}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["Subsubtitle", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {2, 2}}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Section"], CellDingbat -> "\[GraySquare]", 
             ShowCellBracket -> True, ShowGroupOpener -> True, 
             CellMargins -> {{22, Inherited}, {Inherited, 20}}, 
             CellGroupingRules -> {"SectionGrouping", 30}, PageBreakBelow -> 
             False, DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             LineSpacing -> {1.5, 1}, CounterIncrements -> "Section", 
             CounterAssignments -> {{"Subsection", 0}, {"Subsubsection", 0}}, 
             FontFamily -> "Times", FontSize -> 16], 
            Cell[
             StyleData["Section", "Printout"], 
             CellMargins -> {{14, Inherited}, {2, 10}}], 
            Cell[
             StyleData["Section", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {2, 10}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsection"], CellDingbat -> "", ShowCellBracket -> 
             True, ShowGroupOpener -> True, 
             CellMargins -> {{19, Inherited}, {Inherited, 18}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, PageBreakBelow -> 
             False, DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             LineSpacing -> {1.5, 1}, CounterIncrements -> "Subsection", 
             CounterAssignments -> {{"Subsubsection", 0}}, FontFamily -> 
             "Times", FontSize -> 16, FontWeight -> "Bold", FontColor -> 
             RGBColor[0, 0.392187, 0]], 
            Cell[
             StyleData["Subsection", "Printout"], 
             CellMargins -> {{14, Inherited}, {2, 5}}, FontSize -> 12, 
             FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Subsection", "TwoColumn"], 
             CellFrame -> {{0, 0}, {0, 1}}, 
             CellMargins -> {{14, Inherited}, {2, 10}}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Subsubsection"], CellDingbat -> "\[EmptySquare]", 
             ShowClosedCellArea -> True, 
             CellMargins -> {{18, Inherited}, {Inherited, 12}}, 
             CellGroupingRules -> {"SectionGrouping", 50}, PageBreakBelow -> 
             False, DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             LineSpacing -> {1.5, 1}, CounterIncrements -> "Subsubsection", 
             FontFamily -> "Times", FontSize -> 14, FontWeight -> "Bold", 
             FontColor -> RGBColor[0.689998, 0.0899977, 0.119997]], 
            Cell[
             StyleData["Subsubsection", "Printout"], 
             CellMargins -> {{14, Inherited}, {2, 3}}, FontSize -> 12, 
             FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Subsubsection", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {2, 3}}, FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Body Text", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["PrefaceText"], 
             CellMargins -> {{15, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultTextFormatType, 
             DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             LineSpacing -> {1, 1}, LimitsPositioningTokens -> {}, 
             StyleMenuListing -> None, FontFamily -> "Times", FontSize -> 10, 
             FontWeight -> "Plain"], 
            Cell[
             StyleData["PrefaceText", "Printout"], 
             CellMargins -> {{0, Inherited}, {2, 2}}, LineSpacing -> {1, 1}, 
             FontSize -> 12, FontColor -> GrayLevel[0], Background -> None], 
            Cell[
             StyleData["PrefaceText", "TwoColumn"], 
             CellMargins -> {{0, Inherited}, {2, 2}}, LineSpacing -> {1, 1}, 
             FontSize -> 12, FontColor -> GrayLevel[0], Background -> None]}, 
           Closed]], 
         Cell[
          StyleData["PrefaceHyperlink"], 
          CellMargins -> {{15, Inherited}, {Inherited, Inherited}}, 
          DefaultFormatType -> DefaultTextFormatType, DefaultInlineFormatType -> 
          DefaultInputInlineFormatType, LineSpacing -> {1, 1}, 
          LimitsPositioningTokens -> {}, StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, FontFamily -> "Times", 
          FontSize -> 10, FontWeight -> "Plain", 
          FontVariations -> {"Underline" -> True}, FontColor -> 
          RGBColor[0, 0, 1], 
          ButtonBoxOptions -> {
           Active -> True, ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> ButtonData}], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Text"], ShowClosedCellArea -> True, 
             CellMargins -> {{15, 10}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultTextFormatType, 
             DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             LineSpacing -> {1.5, 1}, LimitsPositioningTokens -> {}, 
             FontFamily -> "Times", FontSize -> 16, FontColor -> 
             RGBColor[0, 0, 0.500008]], 
            Cell[
             StyleData["Text", "Printout"], 
             CellMargins -> {{14, Inherited}, {3, 1}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, LineSpacing -> {1, 2}, 
             FontColor -> GrayLevel[0], Background -> None], 
            Cell[
             StyleData["Text", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {3, 1}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, LineSpacing -> {1, 2}, 
             FontSize -> 14, FontColor -> GrayLevel[0], Background -> None]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["SmallText"], ShowClosedCellArea -> True, 
             CellMargins -> {{15, Inherited}, {Inherited, Inherited}}, 
             DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             LineSpacing -> {1.5, 1}, LimitsPositioningTokens -> {}, 
             FontFamily -> "Times", FontSize -> 16], 
            Cell[
             StyleData["SmallText", "Printout"], 
             CellMargins -> {{14, Inherited}, {2, 2}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True], 
            Cell[
             StyleData["SmallText", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {2, 2}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, FontSize -> 14]}, Closed]]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Input/Output", "Section"], 
         Cell[
         "The cells in this section define styles used for input and output \
to the kernel.  Be careful when modifying, renaming, or removing these \
styles, because the front end associates special meanings with these style \
names.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Input"], CellFrame -> {{3, 0}, {0, 0}}, 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             Evaluatable -> True, CellGroupingRules -> "InputGrouping", 
             CellHorizontalScrolling -> True, GroupPageBreakWithin -> False, 
             CellLabelMargins -> {{23, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultInputFormatType, 
             AutoItalicWords -> {}, FormatType -> InputForm, 
             ShowStringCharacters -> True, NumberMarks -> True, 
             CounterIncrements -> "Input", FontWeight -> "Bold"], 
            Cell[
             StyleData["Input", "Printout"], CellFrame -> {{3, 0}, {0, 0}}, 
             CellMargins -> {{30, Inherited}, {2, 2}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, FontSize -> 9], 
            Cell[
             StyleData["Input", "TwoColumn"], CellFrame -> {{3, 0}, {0, 0}}, 
             CellMargins -> {{30, Inherited}, {2, 2}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, FontSize -> 12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Output"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellEditDuplicate -> True, CellGroupingRules -> "OutputGrouping",
              CellHorizontalScrolling -> True, PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, 
             CellLabelMargins -> {{23, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultOutputFormatType, 
             LineSpacing -> {1.5, 0}, FormatType -> StandardForm, FontFamily -> 
             "Courier", FontSize -> 14, FontColor -> RGBColor[0, 0, 1]], 
            Cell[
             StyleData["Output", "Printout"], 
             CellMargins -> {{30, Inherited}, {2, 2}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, LineSpacing -> {1, 0}, 
             FontSize -> 10, FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Output", "TwoColumn"], 
             CellMargins -> {{30, Inherited}, {2, 2}}, PageBreakWithin -> 
             True, GroupPageBreakWithin -> True, LineSpacing -> {1, 0}, 
             FontSize -> 12, FontColor -> GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Message"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", PageBreakWithin -> False, 
             GroupPageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             CellLabelMargins -> {{23, Inherited}, {Inherited, Inherited}}, 
             DefaultFormatType -> DefaultOutputFormatType, FormatType -> 
             InputForm, StyleMenuListing -> None, FontColor -> 
             RGBColor[0, 0, 1]], 
            Cell[
             StyleData["Message", "Printout"], 
             CellMargins -> {{30, Inherited}, {2, 2}}, FontSize -> 9, 
             FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Message", "TwoColumn"], 
             CellMargins -> {{30, Inherited}, {2, 2}}, FontSize -> 9, 
             FontColor -> GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Print"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
             False, CellLabelMargins -> {{23, Inherited}, {
               Inherited, Inherited}}, DefaultFormatType -> 
             DefaultOutputFormatType, FormatType -> InputForm, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Print", "Printout"], 
             CellMargins -> {{30, Inherited}, {2, 2}}, FontSize -> 9], 
            Cell[
             StyleData["Print", "TwoColumn"], 
             CellMargins -> {{30, Inherited}, {2, 2}}, FontSize -> 16]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Info"], 
             CellMargins -> {{45, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "OutputGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GroupPageBreakWithin -> False, 
             GeneratedCell -> True, CellAutoOverwrite -> True, ShowCellLabel -> 
             False, CellLabelMargins -> {{23, Inherited}, {
               Inherited, Inherited}}, DefaultFormatType -> 
             DefaultOutputFormatType, FormatType -> InputForm, 
             StyleMenuListing -> None], 
            Cell[
             StyleData["Info", "Printout"], 
             CellMargins -> {{30, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10], 
            Cell[
             StyleData["Info", "TwoColumn"], 
             CellMargins -> {{30, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 12]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Graphics"], 
             CellMargins -> {{15, Inherited}, {Inherited, Inherited}}, 
             CellGroupingRules -> "GraphicsGrouping", CellHorizontalScrolling -> 
             True, PageBreakWithin -> False, GeneratedCell -> True, 
             CellAutoOverwrite -> True, ShowCellLabel -> False, 
             DefaultFormatType -> DefaultOutputFormatType, FormatType -> 
             InputForm, ImageMargins -> {{35, Inherited}, {Inherited, 0}}, 
             AnimationDisplayTime -> 0.2, StyleMenuListing -> None, FontSize -> 
             14], 
            Cell[
             StyleData["Graphics", "Printout"], 
             CellMargins -> {{30, Inherited}, {0, 0}}, CellFrameMargins -> 
             False, ImageSize -> {Inherited, 150}, 
             ImageMargins -> {{45, 0}, {0, 0}}, 
             ImageRegion -> {{0, 1}, {0, 1}}, FontSize -> 9], 
            Cell[
             StyleData["Graphics", "TwoColumn"], 
             CellMargins -> {{20, Inherited}, {0, 0}}, CellFrameMargins -> 
             False, ImageSize -> {Inherited, 150}, 
             ImageMargins -> {{0, 0}, {0, 0}}, 
             ImageRegion -> {{0, 1}, {0, 1}}]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["CellLabel"], StyleMenuListing -> None, FontFamily -> 
             "Times", FontSize -> 9, FontColor -> RGBColor[0, 0, 1]], 
            Cell[
             StyleData["CellLabel", "Printout"], FontColor -> GrayLevel[1]], 
            Cell[
             StyleData["CellLabel", "TwoColumn"], FontColor -> GrayLevel[1]]},
            Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Special Headings", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LogoPrefaceTitle"], Selectable -> False, Deletable -> 
             False, CellFrame -> {{1, 1}, {0, 5}}, ShowCellBracket -> False, 
             CellMargins -> {{24, 24}, {-1, 10}}, 
             CellGroupingRules -> {"SectionGrouping", 30}, PageBreakBelow -> 
             False, CellFrameMargins -> {{15, Inherited}, {
               Inherited, Inherited}}, DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, 
             LineSpacing -> {1.4, 1}, FontFamily -> "Times", FontSize -> 32, 
             FontWeight -> "Bold", FontColor -> GrayLevel[1], Background -> 
             RGBColor[0.1172, 0.0742, 0.3125]], 
            Cell[
             StyleData["LogoPrefaceTitle", "Printout"], 
             CellFrame -> {{1, 1}, {0, 5}}, 
             CellMargins -> {{0, Inherited}, {-1, Inherited}}, FontSize -> 16,
              FontColor -> GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["LogoPrefaceTitle", "TwoColumn"], 
             CellFrame -> {{1, 1}, {0, 5}}, 
             CellMargins -> {{0, Inherited}, {-1, Inherited}}, FontSize -> 16,
              FontColor -> GrayLevel[0], Background -> GrayLevel[1]]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["PrefaceTitle"], Selectable -> False, Deletable -> 
             False, CellFrame -> {{1, 1}, {1, 0}}, ShowCellBracket -> False, 
             CellMargins -> {{24, 24}, {0, 0}}, 
             CellGroupingRules -> {"SectionGrouping", 30}, PageBreakBelow -> 
             False, CellFrameMargins -> {{15, Inherited}, {
               Inherited, Inherited}}, DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Center, 
             LineSpacing -> {1.4, 1}, FontFamily -> "Times", FontSize -> 32, 
             FontWeight -> "Bold", FontColor -> GrayLevel[1], Background -> 
             RGBColor[0.1172, 0.0742, 0.3125]], 
            Cell[
             StyleData["PrefaceTitle", "Printout"], 
             CellFrame -> {{1, 1}, {1, 0}}, 
             CellMargins -> {{0, Inherited}, {0, 0}}, FontSize -> 16, 
             FontColor -> GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["PrefaceTitle", "TwoColumn"], 
             CellFrame -> {{1, 1}, {1, 0}}, 
             CellMargins -> {{0, Inherited}, {0, 0}}, FontSize -> 16, 
             FontColor -> GrayLevel[0], Background -> GrayLevel[1]]}, 
           Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Special Body Text and Index", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Accident"], CellFrame -> 3, ShowCellBracket -> False, 
             CellMargins -> {{24, 24}, {0, 10}}, 
             CellFrameMargins -> {{15, Inherited}, {Inherited, Inherited}}, 
             TextAlignment -> Center, LineSpacing -> {1.4, 1}, FontFamily -> 
             "Times", FontSize -> 24, FontWeight -> "Bold", FontColor -> 
             RGBColor[1, 0, 0]], 
            Cell[
             StyleData["Accident", "Printout"], CellFrame -> 2, 
             CellMargins -> {{0, Inherited}, {0, Inherited}}, FontSize -> 16, 
             FontColor -> GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["Accident", "TwoColumn"], CellFrame -> 2, 
             CellMargins -> {{0, Inherited}, {0, Inherited}}, FontSize -> 16, 
             FontColor -> GrayLevel[0], Background -> GrayLevel[1]]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["ContentsText"], CellMargins -> {{50, 10}, {5, 5}}, 
             FontFamily -> "Times", FontSize -> 16], 
            Cell[
             StyleData["ContentsText", "Printout"], FontColor -> GrayLevel[0],
              Background -> None], 
            Cell[
             StyleData["ContentsText", "TwoColumn"], FontColor -> 
             GrayLevel[0], Background -> None]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Special1"], CellDingbat -> "\[EmptySquare]", 
             ShowClosedCellArea -> True, DefaultFormatType -> 
             DefaultTextFormatType, DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, FontFamily -> "Times", FontSize -> 
             14, FontWeight -> "Bold", FontColor -> 
             RGBColor[0.689998, 0.0899977, 0.119997]], 
            Cell[
             StyleData["Special1", "Printout"], FontSize -> 12, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["Special1", "TwoColumn"], FontSize -> 12, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Special2"], CellMargins -> {{6, 0}, {0, 0}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, DefaultFormatType -> 
             DefaultTextFormatType, DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Center, 
             FontFamily -> "Courier", FontSize -> 10, FontColor -> 
             GrayLevel[0.333333]], 
            Cell[
             StyleData["Special2", "Printout"], FontSize -> 10, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["Special2", "TwoColumn"], FontSize -> 10, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Special3"], CellDingbat -> "\[GraySquare]", 
             ShowClosedCellArea -> True, DefaultFormatType -> 
             DefaultTextFormatType, DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, FontFamily -> 
             "Courier", FontSize -> 10, FontColor -> GrayLevel[0.333333]], 
            Cell[
             StyleData["Special3", "Printout"], FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Special3", "TwoColumn"], FontColor -> GrayLevel[0]]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Special4"], ShowClosedCellArea -> True, 
             DefaultFormatType -> DefaultTextFormatType, 
             DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             TextAlignment -> Center, FontFamily -> "Courier", FontSize -> 10,
              FontColor -> GrayLevel[0.333333]], 
            Cell[
             StyleData["Special4", "Printout"], FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["Special4", "TwoColumn"], FontColor -> GrayLevel[0]]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Special5"], ShowClosedCellArea -> True, 
             DefaultFormatType -> DefaultTextFormatType, 
             DefaultInlineFormatType -> DefaultInputInlineFormatType, 
             TextAlignment -> Center, FontFamily -> "Courier", FontSize -> 10,
              FontColor -> GrayLevel[0.333333]], 
            Cell[
             StyleData["Special5", "Printout"]], 
            Cell[
             StyleData["Special5", "TwoColumn"]]}, Closed]], 
         Cell[
          StyleData["IndexEntry"], ShowCellBracket -> False, 
          CellMargins -> {{15, 5}, {0, 5}}, PageBreakBelow -> False, 
          DefaultFormatType -> DefaultTextFormatType, DefaultInlineFormatType -> 
          DefaultInputInlineFormatType, ParagraphIndent -> -40, 
          StyleMenuListing -> None, FontSize -> 16], 
         Cell[
          StyleData["IndexSubEntry"], ShowCellBracket -> False, 
          CellMargins -> {{45, 5}, {0, 0}}, DefaultFormatType -> 
          DefaultTextFormatType, DefaultInlineFormatType -> 
          DefaultInputInlineFormatType, ParagraphIndent -> -40, 
          StyleMenuListing -> None, FontSize -> 16]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for License Agreement", "Section"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LicenseHeading"], ShowCellBracket -> True, 
             ShowGroupOpener -> True, CellMargins -> {{24, 24}, {-1, 2}}, 
             CellGroupingRules -> {"SectionGrouping", 40}, PageBreakBelow -> 
             False, CounterIncrements -> "Subsection", 
             CounterAssignments -> {{"Subsubsection", 0}}, StyleMenuListing -> 
             None, FontFamily -> "Helvetica", FontSize -> 12, FontWeight -> 
             "Bold", FontColor -> RGBColor[0.4, 0.300008, 0.6]], 
            Cell[
             StyleData["LicenseHeading", "Printout"], FontSize -> 10, 
             FontColor -> GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["LicenseHeading", "TwoColumn"], FontSize -> 10, 
             FontColor -> GrayLevel[0], Background -> GrayLevel[1]]}, 
           Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LicenseText"], CellFrame -> True, ShowCellBracket -> 
             False, CellMargins -> {{24, 24}, {5, -1}}, StyleMenuListing -> 
             None, FontFamily -> "Helvetica", FontSize -> 12, Background -> 
             RGBColor[1, 0.537743, 0.509071]], 
            Cell[
             StyleData["LicenseText", "Printout"], FontSize -> 10, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["LicenseText", "TwoColumn"], FontSize -> 10, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[1]]}, Closed]]}, Closed]], 
      
      Cell[
       CellGroupData[{
         Cell["Styles for Automatic Numbering", "Section"], 
         Cell[
         "The following styles are useful for numbered equations, figures, \
etc.  They automatically give the cell a FrameLabel containing a reference to \
a particular counter, and also increment that counter.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedEquation"], CounterIncrements -> 
             "NumberedEquation"], 
            Cell[
             StyleData["NumberedEquation", "Printout"]], 
            Cell[
             StyleData["NumberedEquation", "TwoColumn"]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedFigure"], CellFrameLabels -> {{None, None}, {
                Cell[
                 TextData[{"Figure ", 
                   CounterBox["NumberedFigure"]}]], None}}, CounterIncrements -> 
             "NumberedFigure", FormatTypeAutoConvert -> False, FontFamily -> 
             "Times"], 
            Cell[
             StyleData["NumberedFigure", "Printout"], 
             CellMargins -> {{14, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10], 
            Cell[
             StyleData["NumberedFigure", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["NumberedTable"], 
             CellMargins -> {{6, Inherited}, {Inherited, Inherited}}, 
             CellFrameLabels -> {{None, None}, {
                Cell[
                 TextData[{"Table ", 
                   CounterBox["NumberedTable"]}]], None}}, CounterIncrements -> 
             "NumberedTable", FormatTypeAutoConvert -> False, FontFamily -> 
             "Times"], 
            Cell[
             StyleData["NumberedTable", "Printout"], 
             CellMargins -> {{14, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10], 
            Cell[
             StyleData["NumberedTable", "TwoColumn"], 
             CellMargins -> {{14, Inherited}, {Inherited, Inherited}}, 
             FontSize -> 10]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Styles for Headers and Footers", "Section"], 
         Cell[
          StyleData["Header"], CellMargins -> {{0, 0}, {4, 1}}, 
          StyleMenuListing -> None, FontSize -> 10], 
         Cell[
          StyleData["Footer"], CellMargins -> {{0, 0}, {0, 4}}, 
          StyleMenuListing -> None, FontSize -> 9], 
         Cell[
          StyleData["PageNumber"], CellMargins -> {{0, 0}, {4, 1}}, 
          StyleMenuListing -> None, FontFamily -> "Times", FontSize -> 10]}, 
        Closed]], 
      Cell[
       CellGroupData[{
         Cell["Palette Styles", "Section"], 
         Cell[
         "The cells below define styles that define standard ButtonFunctions, \
for use in palette buttons.", "Text"], 
         Cell[
          StyleData["Paste"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, After]}]& )}], 
         Cell[
          StyleData["Evaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["EvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionMove[
                FrontEnd`InputNotebook[], All, Cell, 1], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluate"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluate[
                FrontEnd`InputNotebook[], All]}]& )}], 
         Cell[
          StyleData["CopyEvaluateCell"], StyleMenuListing -> None, 
          ButtonStyleMenuListing -> Automatic, 
          ButtonBoxOptions -> {ButtonFunction :> (FrontEndExecute[{
               FrontEnd`SelectionCreateCell[
                FrontEnd`InputNotebook[], All], 
               FrontEnd`NotebookApply[
                FrontEnd`InputNotebook[], #, All], 
               FrontEnd`SelectionEvaluateCreateCell[
                FrontEnd`InputNotebook[], All]}]& )}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Hyperlink Styles", "Section"], 
         Cell[
         "The cells below define styles useful for making hypertext \
ButtonBoxes.  The \"Hyperlink\" style is for links within the same Notebook, \
or between Notebooks.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["Hyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontSize -> 14, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0.392187, 0], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& )}], 
            Cell[
             StyleData["Hyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["Hyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[1]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["MakeMathHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontSize -> 14, FontWeight -> 
             "Bold", FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[1, 1, 1], Background -> 
             RGBColor[0.1172, 0.0742, 0.3125], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               "Come visit us!"}], 
            Cell[
             StyleData["MakeMathHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[1]], 
            Cell[
             StyleData["MakeMathHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0], Background -> GrayLevel[1]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BasicsHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", FontSlant -> 
             "Italic", FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0.848096, 0.171878, 0.228321], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               "Go to Basics"}], 
            Cell[
             StyleData["BasicsHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["BasicsHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["BasicsIndexHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0.848096, 0.171878, 0.228321], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2], 
                  FrontEnd`SelectionMove[
                   FrontEnd`SelectedNotebook[], Next, CellGroup], 
                  FrontEndToken["SelectionCloseAllGroups"], 
                  FrontEndToken["OpenCloseGroup"]}]& ), ButtonNote -> 
               "Link into Basics"}], 
            Cell[
             StyleData["BasicsIndexHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["BasicsIndexHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TutorialsHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", FontSlant -> 
             "Italic", FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0.0199588, 0.346716, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               "Go to Tutorials"}], 
            Cell[
             StyleData["TutorialsHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["TutorialsHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["TutorialsIndexHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0.0199588, 0.346716, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2], 
                  FrontEnd`SelectionMove[
                   FrontEnd`SelectedNotebook[], Next, CellGroup], 
                  FrontEndToken["SelectionCloseAllGroups"], 
                  FrontEndToken["OpenCloseGroup"]}]& ), ButtonNote -> 
               "Link into Tutorials"}], 
            Cell[
             StyleData["TutorialsIndexHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["TutorialsIndexHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GiveItaTryHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", FontSlant -> 
             "Italic", FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0.497459, 0.196094, 0.543877], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               "Go to GiveItaTry"}], 
            Cell[
             StyleData["GiveItaTryHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["GiveItaTryHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GiveItaTryIndexHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0.497459, 0.196094, 0.543877], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2], 
                  FrontEnd`SelectionMove[
                   FrontEnd`SelectedNotebook[], Next, CellGroup], 
                  FrontEndToken["SelectionCloseAllGroups"], 
                  FrontEndToken["OpenCloseGroup"]}]& ), ButtonNote -> 
               "Link into GiveItaTry"}], 
            Cell[
             StyleData["GiveItaTryIndexHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["GiveItaTryIndexHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LiteracyHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", FontSlant -> 
             "Italic", FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[1, 0.433326, 0], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2]}]& ), ButtonNote -> 
               "Go to Literacy"}], 
            Cell[
             StyleData["LiteracyHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["LiteracyHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["LiteracyIndexHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[1, 0.433326, 0], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2], 
                  FrontEnd`SelectionMove[
                   FrontEnd`SelectedNotebook[], Next, CellGroup], 
                  FrontEndToken["SelectionCloseAllGroups"], 
                  FrontEndToken["OpenCloseGroup"]}]& ), ButtonNote -> 
               "Link into Literacy"}], 
            Cell[
             StyleData["LiteracyIndexHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["LiteracyIndexHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["PreviewHyperlink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> None, FontWeight -> "Bold", FontSlant -> 
             "Italic", FontVariations -> {"Underline" -> True}, FontColor -> 
             GrayLevel[0.250004], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`NotebookLocate[#2], 
                  FrontEndToken["OpenCloseGroup"]}]& ), ButtonNote -> 
               "Preview of Lesson"}], 
            Cell[
             StyleData["PreviewHyperlink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["PreviewHyperlink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["RefGuideLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, FontFamily -> "Courier", 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["RefGuideLink", #]}]& )}], 
            Cell[
             StyleData["RefGuideLink", "Presentation"]], 
            Cell[
             StyleData["RefGuideLink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["RefGuideLink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["GettingStartedLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["GettingStarted", #]}]& )}], 
            Cell[
             StyleData["GettingStartedLink", "Presentation"]], 
            Cell[
             StyleData["GettingStartedLink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["GettingStartedLink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["OtherInformationLink"], StyleMenuListing -> None, 
             ButtonStyleMenuListing -> Automatic, 
             FontVariations -> {"Underline" -> True}, FontColor -> 
             RGBColor[0, 0, 1], 
             ButtonBoxOptions -> {
              Active -> True, Appearance -> {Automatic, None}, 
               ButtonFunction :> (FrontEndExecute[{
                  FrontEnd`HelpBrowserLookup["OtherInformation", #]}]& )}], 
            Cell[
             StyleData["OtherInformationLink", "Presentation"]], 
            Cell[
             StyleData["OtherInformationLink", "Printout"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]], 
            Cell[
             StyleData["OtherInformationLink", "TwoColumn"], 
             FontVariations -> {"Underline" -> False}, FontColor -> 
             GrayLevel[0]]}, Closed]]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["Placeholder Styles", "Section"], 
         Cell[
         "The cells below define styles useful for making placeholder objects \
in palette templates.", "Text"], 
         Cell[
          StyleData["Placeholder"], Editable -> False, Selectable -> False, 
          StyleBoxAutoDelete -> True, Placeholder -> True, StyleMenuListing -> 
          None], 
         Cell[
          StyleData["SelectionPlaceholder"], Editable -> False, Selectable -> 
          False, StyleBoxAutoDelete -> True, Placeholder -> 
          PrimaryPlaceholder, StyleMenuListing -> None, DrawHighlighted -> 
          True]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell["FormatType Styles", "Section"], 
         Cell[
         "The cells below define styles that are mixed in with the styles of \
most cells.  If a cell's FormatType matches the name of one of the styles \
defined below, then that style is applied between the cell's style and its \
own options.", "Text"], 
         Cell[
          StyleData["CellExpression"], PageWidth -> Infinity, 
          CellMargins -> {{6, Inherited}, {Inherited, Inherited}}, 
          ShowCellLabel -> False, ShowSpecialCharacters -> False, 
          AllowInlineCells -> False, StyleMenuListing -> None, FontFamily -> 
          "Courier", FontSize -> 12], 
         Cell[
          StyleData["InputForm"], AllowInlineCells -> False, StyleMenuListing -> 
          None, FontFamily -> "Courier"], 
         Cell[
          StyleData["OutputForm"], PageWidth -> Infinity, TextAlignment -> 
          Left, LineSpacing -> {1, -5}, StyleMenuListing -> None, FontFamily -> 
          "Courier"], 
         Cell[
          StyleData["StandardForm"], LineSpacing -> {1.25, 0}, 
          StyleMenuListing -> None, FontFamily -> "Courier"], 
         Cell[
          StyleData["TraditionalForm"], LineSpacing -> {1.25, 0}, 
          SingleLetterItalics -> True, TraditionalFunctionNotation -> True, 
          DelimiterMatching -> None, StyleMenuListing -> None], 
         Cell[
         "The style defined below is mixed in to any cell that is in an \
inline cell within another.", "Text"], 
         Cell[
          CellGroupData[{
            Cell[
             StyleData["InlineCell"], DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, ScriptLevel -> 
             1, LimitsPositioningTokens -> {}, StyleMenuListing -> None, 
             FontFamily -> "Times", FontSize -> 16, FontColor -> 
             RGBColor[0, 0, 1]], 
            Cell[
             StyleData["InlineCell", "Presentation"], DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, ScriptLevel -> 
             1, LimitsPositioningTokens -> {}, StyleMenuListing -> None, 
             FontFamily -> "Times", FontSize -> 16, FontColor -> 
             RGBColor[0, 0, 1]], 
            Cell[
             StyleData["InlineCell", "Printout"], DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, ScriptLevel -> 
             1, LimitsPositioningTokens -> {}, StyleMenuListing -> None, 
             FontColor -> GrayLevel[0]], 
            Cell[
             StyleData["InlineCell", "TwoColumn"], DefaultInlineFormatType -> 
             DefaultInputInlineFormatType, TextAlignment -> Left, ScriptLevel -> 
             1, LimitsPositioningTokens -> {}, StyleMenuListing -> None, 
             FontSize -> 14, FontColor -> GrayLevel[0]]}, Closed]]}, 
        Closed]]}, Open]]}, Visible -> False, FrontEndVersion -> 
  "8.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (November 6, 2010)", 
  StyleDefinitions -> "PrivateStylesheetFormatting.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "MGM.03.T1"->{
  Cell[29519, 803, 95, 1, 36, "Subsection",
   CellTags->"MGM.03.T1"]},
 "MGM.03.T2"->{
  Cell[43907, 1282, 150, 4, 61, "Subsection",
   CellTags->"MGM.03.T2"]},
 "MGM.03.T3"->{
  Cell[83441, 2577, 548, 19, 86, "Subsection",
   CellTags->"MGM.03.T3"]},
 "MGM.03.T4"->{
  Cell[111975, 3583, 167, 4, 61, "Subsection",
   CellTags->"MGM.03.T4"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"MGM.03.T1", 220007, 6574},
 {"MGM.03.T2", 220095, 6577},
 {"MGM.03.T3", 220185, 6580},
 {"MGM.03.T4", 220276, 6583}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[545, 20, 5169, 90, 104, "LogoPrefaceTitle"],
Cell[5717, 112, 492, 14, 88, "PrefaceTitle"],
Cell[6212, 128, 181, 6, 108, "Title"],
Cell[CellGroupData[{
Cell[6418, 138, 193, 7, 28, "Special2"],
Cell[6614, 147, 1292, 38, 141, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[7931, 189, 38, 0, 31, "Subsubsection"],
Cell[7972, 191, 1344, 31, 156, "Input"],
Cell[9319, 224, 170, 4, 20, "Input",
 InitializationCell->True],
Cell[9492, 230, 17368, 481, 1406, "Input",
 InitializationCell->True],
Cell[26863, 713, 210, 6, 20, "Input",
 InitializationCell->True]
}, Closed]],
Cell[CellGroupData[{
Cell[27110, 724, 39, 0, 35, "Subsubsection"],
Cell[27152, 726, 2318, 71, 161, "Input",
 InitializationCell->True]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[29519, 803, 95, 1, 36, "Subsection",
 CellTags->"MGM.03.T1"],
Cell[CellGroupData[{
Cell[29639, 808, 52, 0, 31, "Subsubsection"],
Cell[29694, 810, 179, 6, 24, "Text"],
Cell[29876, 818, 1799, 57, 141, "Input"],
Cell[CellGroupData[{
Cell[31700, 879, 191, 5, 74, "Text"],
Cell[31894, 886, 32, 0, 31, "Subsubsection"],
Cell[31929, 888, 90, 2, 24, "SmallText"],
Cell[32022, 892, 743, 24, 94, "Input"],
Cell[32768, 918, 29, 0, 24, "SmallText"],
Cell[32800, 920, 87, 2, 20, "Input"],
Cell[32890, 924, 137, 3, 49, "SmallText"],
Cell[33030, 929, 462, 14, 20, "Input"],
Cell[33495, 945, 30, 0, 24, "SmallText"],
Cell[33528, 947, 935, 26, 81, "Input"],
Cell[34466, 975, 69, 0, 20, "Special5"],
Cell[34538, 977, 697, 22, 199, "SmallText"],
Cell[35238, 1001, 1231, 42, 116, "Input"],
Cell[36472, 1045, 57, 0, 24, "SmallText"],
Cell[36532, 1047, 483, 15, 51, "Input"],
Cell[37018, 1064, 50, 0, 24, "SmallText"],
Cell[37071, 1066, 467, 15, 20, "Input"],
Cell[37541, 1083, 235, 4, 74, "SmallText"],
Cell[37779, 1089, 83, 1, 24, "SmallText"],
Cell[37865, 1092, 5981, 183, 508, "Input"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[43907, 1282, 150, 4, 61, "Subsection",
 CellTags->"MGM.03.T2"],
Cell[CellGroupData[{
Cell[44082, 1290, 78, 0, 31, "Subsubsection"],
Cell[44163, 1292, 72, 0, 24, "Text"],
Cell[44238, 1294, 5472, 173, 342, "Input"],
Cell[CellGroupData[{
Cell[49735, 1471, 169, 3, 49, "Text"],
Cell[49907, 1476, 27, 0, 23, "Special1"],
Cell[49937, 1478, 132, 3, 49, "SmallText"],
Cell[50072, 1483, 82, 2, 20, "Input"],
Cell[50157, 1487, 76, 0, 24, "SmallText"],
Cell[50236, 1489, 364, 12, 62, "Input"],
Cell[50603, 1503, 68, 0, 24, "SmallText"],
Cell[50674, 1505, 460, 14, 20, "Input"],
Cell[51137, 1521, 91, 2, 24, "SmallText"],
Cell[51231, 1525, 2534, 88, 141, "Input"],
Cell[53768, 1615, 89, 2, 20, "Special5"],
Cell[53860, 1619, 157, 3, 49, "SmallText"],
Cell[54020, 1624, 370, 12, 36, "Input"],
Cell[54393, 1638, 67, 0, 24, "SmallText"],
Cell[54463, 1640, 528, 14, 66, "Input"],
Cell[54994, 1656, 48, 0, 24, "SmallText"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[55091, 1662, 65, 0, 31, "Subsubsection"],
Cell[55159, 1664, 94, 2, 20, "Special5"],
Cell[55256, 1668, 93, 2, 24, "Text"],
Cell[55352, 1672, 2226, 72, 156, "Input"],
Cell[57581, 1746, 86, 2, 24, "Text"],
Cell[57670, 1750, 1147, 36, 133, "Input"],
Cell[CellGroupData[{
Cell[58842, 1790, 69, 0, 24, "Text"],
Cell[58914, 1792, 27, 0, 23, "Special1"],
Cell[58944, 1794, 123, 3, 49, "SmallText"],
Cell[59070, 1799, 3719, 114, 215, "Input"],
Cell[62792, 1915, 143, 3, 31, "Special5"],
Cell[62938, 1920, 51, 0, 24, "SmallText"],
Cell[62992, 1922, 1129, 33, 96, "Input"],
Cell[64124, 1957, 342, 8, 149, "SmallText"],
Cell[64469, 1967, 3530, 112, 236, "Input"],
Cell[68002, 2081, 126, 3, 31, "Special5"],
Cell[68131, 2086, 107, 2, 24, "SmallText"],
Cell[68241, 2090, 232, 5, 36, "Input"],
Cell[68476, 2097, 95, 3, 49, "SmallText"],
Cell[68574, 2102, 1138, 30, 111, "Input"],
Cell[69715, 2134, 44, 0, 24, "SmallText"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[69808, 2140, 68, 0, 31, "Subsubsection"],
Cell[69879, 2142, 99, 2, 24, "Text"],
Cell[69981, 2146, 2822, 92, 208, "Input"],
Cell[CellGroupData[{
Cell[72828, 2242, 69, 0, 24, "Text"],
Cell[72900, 2244, 27, 0, 23, "Special1"],
Cell[72930, 2246, 66, 0, 20, "Special5"],
Cell[72999, 2248, 123, 3, 49, "SmallText"],
Cell[73125, 2253, 3692, 112, 215, "Input"],
Cell[76820, 2367, 74, 0, 20, "Special5"],
Cell[76897, 2369, 51, 0, 24, "SmallText"],
Cell[76951, 2371, 912, 25, 66, "Input"],
Cell[77866, 2398, 342, 8, 149, "SmallText"],
Cell[78211, 2408, 3530, 112, 236, "Input"],
Cell[81744, 2522, 107, 2, 24, "SmallText"],
Cell[81854, 2526, 242, 5, 36, "Input"],
Cell[82099, 2533, 95, 3, 49, "SmallText"],
Cell[82197, 2538, 1136, 30, 111, "Input"],
Cell[83336, 2570, 44, 0, 24, "SmallText"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[83441, 2577, 548, 19, 86, "Subsection",
 CellTags->"MGM.03.T3"],
Cell[CellGroupData[{
Cell[84014, 2600, 164, 3, 52, "Subsubsection"],
Cell[84181, 2605, 483, 10, 224, "Text"],
Cell[84667, 2617, 8251, 255, 726, "Input"],
Cell[92921, 2874, 307, 8, 174, "Text"],
Cell[93231, 2884, 556, 21, 32, "Text"],
Cell[93790, 2907, 202, 7, 55, "Text"],
Cell[93995, 2916, 339, 14, 32, "Text"],
Cell[94337, 2932, 2119, 64, 201, "Input"],
Cell[96459, 2998, 98, 3, 49, "Text"],
Cell[96560, 3003, 556, 21, 32, "Text"],
Cell[97119, 3026, 97, 2, 24, "Text"],
Cell[97219, 3030, 233, 10, 32, "Text"],
Cell[97455, 3042, 87, 2, 24, "Text"],
Cell[CellGroupData[{
Cell[97567, 3048, 554, 21, 32, "Text"],
Cell[98124, 3071, 32, 0, 31, "Subsubsection"],
Cell[98159, 3073, 322, 8, 24, "SmallText"],
Cell[98484, 3083, 1948, 65, 100, "Input"],
Cell[100435, 3150, 206, 7, 24, "Text"],
Cell[CellGroupData[{
Cell[100666, 3161, 827, 27, 68, "Input"],
Cell[101496, 3190, 212, 5, 49, "SmallText"],
Cell[101711, 3197, 2609, 89, 171, "Input"]
}, Closed]],
Cell[104335, 3289, 29, 0, 24, "SmallText"],
Cell[104367, 3291, 72, 1, 20, "Input"],
Cell[104442, 3294, 277, 8, 81, "Text"],
Cell[104722, 3304, 178, 6, 37, "Input"],
Cell[104903, 3312, 91, 2, 24, "SmallText"],
Cell[104997, 3316, 2160, 78, 32, "SmallText"],
Cell[107160, 3396, 104, 2, 24, "SmallText"],
Cell[107267, 3400, 322, 14, 31, "SmallText"],
Cell[107592, 3416, 133, 4, 74, "SmallText"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[107774, 3426, 166, 3, 52, "Subsubsection"],
Cell[107943, 3431, 83, 3, 49, "Text"],
Cell[108029, 3436, 804, 30, 32, "Text"],
Cell[CellGroupData[{
Cell[108858, 3470, 38, 0, 24, "Text"],
Cell[108899, 3472, 32, 0, 31, "Subsubsection"],
Cell[108934, 3474, 157, 5, 24, "SmallText"],
Cell[109094, 3481, 1849, 62, 100, "Input"],
Cell[110946, 3545, 165, 5, 24, "SmallText"],
Cell[111114, 3552, 563, 17, 36, "Input"],
Cell[111680, 3571, 234, 5, 99, "SmallText"]
}, Closed]]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[111975, 3583, 167, 4, 61, "Subsection",
 CellTags->"MGM.03.T4"],
Cell[CellGroupData[{
Cell[112167, 3591, 232, 6, 52, "Subsubsection"],
Cell[112402, 3599, 127, 3, 49, "Text"],
Cell[112532, 3604, 3003, 92, 207, "Input"],
Cell[115538, 3698, 255, 8, 74, "Text"],
Cell[115796, 3708, 1149, 32, 100, "Input"],
Cell[116948, 3742, 40, 0, 24, "Text"],
Cell[116991, 3744, 546, 16, 124, "Text"],
Cell[117540, 3762, 3153, 108, 214, "Input"],
Cell[120696, 3872, 100, 2, 24, "Text"],
Cell[120799, 3876, 298, 9, 20, "Input"],
Cell[121100, 3887, 49, 3, 49, "Text"],
Cell[121152, 3892, 1142, 31, 66, "Input"],
Cell[122297, 3925, 25, 0, 24, "Text"],
Cell[122325, 3927, 1662, 44, 81, "Input"],
Cell[123990, 3973, 172, 4, 74, "Text"],
Cell[124165, 3979, 525, 15, 99, "Text"],
Cell[124693, 3996, 4092, 141, 265, "Input"],
Cell[CellGroupData[{
Cell[128810, 4141, 156, 4, 74, "Text"],
Cell[128969, 4147, 27, 0, 23, "Special1"],
Cell[128999, 4149, 483, 13, 99, "SmallText"],
Cell[129485, 4164, 3532, 121, 235, "Input"],
Cell[133020, 4287, 130, 5, 24, "SmallText"],
Cell[133153, 4294, 312, 9, 20, "Input"],
Cell[133468, 4305, 226, 6, 74, "SmallText"],
Cell[133697, 4313, 192, 8, 24, "SmallText"],
Cell[133892, 4323, 609, 19, 36, "Input"],
Cell[134504, 4344, 186, 5, 99, "SmallText"],
Cell[134693, 4351, 255, 11, 24, "SmallText"],
Cell[134951, 4364, 807, 25, 36, "Input"],
Cell[135761, 4391, 994, 24, 349, "SmallText"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[136804, 4421, 271, 8, 52, "Subsubsection"],
Cell[137078, 4431, 127, 3, 49, "Text"],
Cell[137208, 4436, 3003, 92, 207, "Input"],
Cell[140214, 4530, 264, 8, 74, "Text"],
Cell[140481, 4540, 547, 16, 124, "Text"],
Cell[141031, 4558, 3121, 107, 214, "Input"],
Cell[144155, 4667, 100, 2, 24, "Text"],
Cell[144258, 4671, 298, 9, 20, "Input"],
Cell[144559, 4682, 39, 0, 24, "Text"],
Cell[144601, 4684, 25, 0, 24, "Text"],
Cell[144629, 4686, 1623, 45, 115, "Input"],
Cell[146255, 4733, 263, 8, 74, "Text"],
Cell[CellGroupData[{
Cell[146543, 4745, 545, 14, 124, "Text"],
Cell[147091, 4761, 27, 0, 23, "Special1"],
Cell[147121, 4763, 481, 13, 99, "SmallText"],
Cell[147605, 4778, 849, 16, 249, "SmallText"]
}, Closed]]
}, Closed]],
Cell[CellGroupData[{
Cell[148503, 4800, 54, 0, 31, "Subsubsection"],
Cell[148560, 4802, 127, 3, 49, "Text"],
Cell[148690, 4807, 3003, 92, 207, "Input"],
Cell[151696, 4901, 98, 4, 49, "Text"],
Cell[151797, 4907, 554, 16, 124, "Text"],
Cell[152354, 4925, 3856, 138, 214, "Input"],
Cell[156213, 5065, 339, 9, 74, "Text"],
Cell[156555, 5076, 441, 14, 20, "Input"],
Cell[156999, 5092, 26, 0, 24, "Text"],
Cell[157028, 5094, 552, 16, 124, "Text"],
Cell[157583, 5112, 3844, 137, 214, "Input"],
Cell[161430, 5251, 339, 9, 74, "Text"],
Cell[161772, 5262, 482, 16, 20, "Input"],
Cell[162257, 5280, 99, 3, 49, "Text"],
Cell[162359, 5285, 498, 16, 36, "Input"],
Cell[CellGroupData[{
Cell[162882, 5305, 95, 3, 49, "Text"],
Cell[162980, 5310, 27, 0, 23, "Special1"],
Cell[163010, 5312, 437, 13, 99, "SmallText"],
Cell[CellGroupData[{
Cell[163472, 5329, 201, 4, 12, "Special2"],
Cell[163676, 5335, 921, 35, 99, "SmallText"],
Cell[164600, 5372, 268, 10, 24, "SmallText"],
Cell[164871, 5384, 223, 6, 23, "Special2"],
Cell[165097, 5392, 279, 11, 24, "SmallText"],
Cell[165379, 5405, 125, 2, 12, "Special2"],
Cell[165507, 5409, 265, 10, 24, "SmallText"],
Cell[165775, 5421, 220, 6, 23, "Special2"],
Cell[165998, 5429, 566, 20, 49, "SmallText"],
Cell[166567, 5451, 586, 22, 74, "SmallText"],
Cell[167156, 5475, 282, 7, 149, "SmallText"]
}, Closed]]
}, Closed]]
}, Closed]]
}, Closed]]
}
]
*)

(* End of internal cache information *)
